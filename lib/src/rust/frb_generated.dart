// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'api/vtop/parser/faculty/parseabout.dart';
import 'api/vtop/parser/faculty/parsesearch.dart';
import 'api/vtop/parser/hostel/parseleave.dart';
import 'api/vtop/parser/hostel/parseoutings.dart';
import 'api/vtop/parser/parseattn.dart';
import 'api/vtop/parser/parsebiometric.dart';
import 'api/vtop/parser/parsegradehistory.dart';
import 'api/vtop/parser/parsemarks.dart';
import 'api/vtop/parser/parsepaymentreceipts.dart';
import 'api/vtop/parser/parsependingpayments.dart';
import 'api/vtop/parser/parseprofile.dart';
import 'api/vtop/parser/parsesched.dart';
import 'api/vtop/parser/parsett.dart';
import 'api/vtop/session_manager.dart';
import 'api/vtop/types/attendance.dart';
import 'api/vtop/types/biometric.dart';
import 'api/vtop/types/comprehensive_data.dart';
import 'api/vtop/types/exam_schedule.dart';
import 'api/vtop/types/faculty.dart';
import 'api/vtop/types/grade_course_history.dart';
import 'api/vtop/types/grade_history.dart';
import 'api/vtop/types/hostel.dart';
import 'api/vtop/types/marks.dart';
import 'api/vtop/types/mentor_details.dart';
import 'api/vtop/types/paid_payment_receipt.dart';
import 'api/vtop/types/pending_payment_receipt.dart';
import 'api/vtop/types/semester.dart';
import 'api/vtop/types/student_profile.dart';
import 'api/vtop/types/timetable.dart';
import 'api/vtop/vtop_client.dart';
import 'api/vtop/vtop_config.dart';
import 'api/vtop/vtop_errors.dart';
import 'api/vtop/wifi.dart';
import 'api/vtop_get_client.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -275260985;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'lib_vtop',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> crateApiVtopSessionManagerSessionManagerClear(
      {required SessionManager that});

  Future<ArcJar> crateApiVtopSessionManagerSessionManagerGetCookieStore(
      {required SessionManager that});

  Future<String?> crateApiVtopSessionManagerSessionManagerGetCsrfToken(
      {required SessionManager that});

  Future<bool> crateApiVtopSessionManagerSessionManagerIsAuthenticated(
      {required SessionManager that});

  Future<SessionManager> crateApiVtopSessionManagerSessionManagerNew();

  Future<void> crateApiVtopSessionManagerSessionManagerSetAuthenticated(
      {required SessionManager that, required bool authenticated});

  Future<void> crateApiVtopSessionManagerSessionManagerSetCsrfFromExternal(
      {required SessionManager that, required String token});

  Future<void> crateApiVtopSessionManagerSessionManagerSetCsrfToken(
      {required SessionManager that, required String token});

  Future<VtopClient> crateApiVtopVtopConfigVtopClientBuilderBuild(
      {required VtopClientBuilder that,
      required String username,
      required String password});

  Future<VtopClientBuilder> crateApiVtopVtopConfigVtopClientBuilderNew();

  Future<VtopResultString>
      crateApiVtopVtopClientVtopClientDownloadPaymentReceipt(
          {required VtopClient that,
          required String receiptNo,
          required String applno});

  Future<VtopResultVecAttendanceRecord>
      crateApiVtopVtopClientVtopClientGetAttendance(
          {required VtopClient that, required String semesterId});

  Future<VtopResultVecAttendanceDetailRecord>
      crateApiVtopVtopClientVtopClientGetAttendanceDetail(
          {required VtopClient that,
          required String semesterId,
          required String courseId,
          required String courseType});

  Future<VtopResultVecBiometricRecord>
      crateApiVtopVtopClientVtopClientGetBiometricData(
          {required VtopClient that, required String date});

  Future<VtopResultVecU8> crateApiVtopVtopClientVtopClientGetCookie(
      {required VtopClient that});

  Future<VtopResultVecPerExamScheduleRecord>
      crateApiVtopVtopClientVtopClientGetExamSchedule(
          {required VtopClient that, required String semesterId});

  Future<VtopResultFacultyDetails>
      crateApiVtopVtopClientVtopClientGetFacultyData(
          {required VtopClient that, required String empId});

  Future<VtopResultGetFaculty> crateApiVtopVtopClientVtopClientGetFacultySearch(
      {required VtopClient that, required String searchTerm});

  Future<VtopResultGradeHistoryVecGradeCourseHistory>
      crateApiVtopVtopClientVtopClientGetGradeHistory(
          {required VtopClient that});

  Future<VtopResultVecU8> crateApiVtopVtopClientVtopClientGetHostelLeavePdf(
      {required VtopClient that, required String leaveId});

  Future<VtopResultHostelLeaveData>
      crateApiVtopVtopClientVtopClientGetHostelLeaveReport(
          {required VtopClient that});

  Future<VtopResultVecU8> crateApiVtopVtopClientVtopClientGetHostelOutingPdf(
      {required VtopClient that, required String bookingId});

  Future<VtopResultHostelOutingData>
      crateApiVtopVtopClientVtopClientGetHostelReport(
          {required VtopClient that});

  Future<VtopResultVecMarksRecord> crateApiVtopVtopClientVtopClientGetMarks(
      {required VtopClient that, required String semesterId});

  Future<VtopResultVecPaidPaymentReceipt>
      crateApiVtopVtopClientVtopClientGetPaymentReceipts(
          {required VtopClient that});

  Future<VtopResultVecPendingPaymentReceipt>
      crateApiVtopVtopClientVtopClientGetPendingPayment(
          {required VtopClient that});

  Future<VtopResultSemesterData> crateApiVtopVtopClientVtopClientGetSemesters(
      {required VtopClient that});

  Future<VtopResultStudentProfile>
      crateApiVtopVtopClientVtopClientGetStudentProfile(
          {required VtopClient that});

  Future<VtopResultVecTimetableSlot>
      crateApiVtopVtopClientVtopClientGetTimetable(
          {required VtopClient that, required String semesterId});

  Future<bool> crateApiVtopVtopClientVtopClientIsAuthenticated(
      {required VtopClient that});

  Future<VtopResult> crateApiVtopVtopClientVtopClientLogin(
      {required VtopClient that});

  Future<VtopResultString> crateApiVtopVtopClientVtopClientSubmitOutingForm(
      {required VtopClient that,
      required String purposeOfVisit,
      required String outingDate,
      required String contactNumber,
      required String outPlace,
      required String outTime});

  Future<VtopClient> crateApiVtopVtopClientVtopClientWithConfig(
      {required VtopConfig config,
      required SessionManager session,
      required String username,
      required String password});

  Future<ComprehensiveDataResponse> crateApiVtopGetClientFetchAllData(
      {required VtopClient client, required String semesterId});

  Future<List<AttendanceRecord>> crateApiVtopGetClientFetchAttendance(
      {required VtopClient client, required String semesterId});

  Future<List<AttendanceDetailRecord>>
      crateApiVtopGetClientFetchAttendanceDetail(
          {required VtopClient client,
          required String semesterId,
          required String courseId,
          required String courseType});

  Future<List<BiometricRecord>> crateApiVtopGetClientFetchBiometricData(
      {required VtopClient client, required String date});

  Future<Uint8List> crateApiVtopGetClientFetchCookies(
      {required VtopClient client});

  Future<List<PerExamScheduleRecord>> crateApiVtopGetClientFetchExamShedule(
      {required VtopClient client, required String semesterId});

  Future<FacultyDetails> crateApiVtopGetClientFetchFacultyData(
      {required VtopClient client, required String empId});

  Future<GetFaculty> crateApiVtopGetClientFetchFacultySearch(
      {required VtopClient client, required String searchTerm});

  Future<(GradeHistory, List<GradeCourseHistory>)>
      crateApiVtopGetClientFetchGradeHistory({required VtopClient client});

  Future<Uint8List> crateApiVtopGetClientFetchHostelOuting(
      {required VtopClient client, required String bookingId});

  Future<HostelOutingData> crateApiVtopGetClientFetchHostelReport(
      {required VtopClient client});

  Future<bool> crateApiVtopGetClientFetchIsAuth({required VtopClient client});

  Future<List<MarksRecord>> crateApiVtopGetClientFetchMarks(
      {required VtopClient client, required String semesterId});

  Future<List<PaidPaymentReceipt>> crateApiVtopGetClientFetchPaymentReceipts(
      {required VtopClient client});

  Future<List<PendingPaymentReceipt>> crateApiVtopGetClientFetchPendingPayments(
      {required VtopClient client});

  Future<SemesterData> crateApiVtopGetClientFetchSemesters(
      {required VtopClient client});

  Future<StudentProfile> crateApiVtopGetClientFetchStudentProfile(
      {required VtopClient client});

  Future<List<TimetableSlot>> crateApiVtopGetClientFetchTimetable(
      {required VtopClient client, required String semesterId});

  Future<(bool, String)> crateApiVtopGetClientFetchWifi(
      {required String username, required String password, required int i});

  VtopClient crateApiVtopGetClientGetVtopClient(
      {required String username, required String password});

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Future<HostelLeaveData> crateApiVtopGetClientLeaveReport(
      {required VtopClient client});

  Future<Uint8List> crateApiVtopGetClientLeaveReportDownload(
      {required VtopClient client, required String leaveId});

  Future<List<AttendanceRecord>> crateApiVtopParserParseattnParseAttendance(
      {required String html});

  Future<List<BiometricRecord>>
      crateApiVtopParserParsebiometricParseBiometricData(
          {required String html});

  Future<FacultyDetails> crateApiVtopParserFacultyParseaboutParseFacultyData(
      {required String html});

  Future<GetFaculty> crateApiVtopParserFacultyParsesearchParseFacultySearch(
      {required String html});

  Future<List<AttendanceDetailRecord>>
      crateApiVtopParserParseattnParseFullAttendance({required String html});

  Future<(GradeHistory, List<GradeCourseHistory>)>
      crateApiVtopParserParsegradehistoryParseGradeHistory(
          {required String html});

  Future<HostelLeaveData> crateApiVtopParserHostelParseleaveParseHostelLeave(
      {required String html});

  Future<HostelOutingData>
      crateApiVtopParserHostelParseoutingsParseHostelOuting(
          {required String html});

  Future<List<MarksRecord>> crateApiVtopParserParsemarksParseMarks(
      {required String html});

  Future<List<PaidPaymentReceipt>>
      crateApiVtopParserParsepaymentreceiptsParsePaymentReceipts(
          {required String html});

  Future<List<PendingPaymentReceipt>>
      crateApiVtopParserParsependingpaymentsParsePendingPayments(
          {required String html});

  Future<List<PerExamScheduleRecord>> crateApiVtopParserParseschedParseSchedule(
      {required String html});

  Future<SemesterData> crateApiVtopParserParsettParseSemidTimetable(
      {required String html});

  Future<StudentProfile> crateApiVtopParserParseprofileParseStudentProfile(
      {required String html});

  Future<List<TimetableSlot>> crateApiVtopParserParsettParseTimetable(
      {required String html});

  Future<String> crateApiVtopGetClientStudentPaymentReceiptDownload(
      {required VtopClient client,
      required String receiptNo,
      required String applno});

  Future<String> crateApiVtopGetClientSubmitHostelOutingForm(
      {required VtopClient client,
      required String purposeOfVisit,
      required String outingDate,
      required String contactNumber,
      required String outPlace,
      required String outTime});

  Future<(bool, String)> crateApiVtopWifiUniversityWifiLoginLogout(
      {required int i, required String username, required String password});

  Future<void> crateApiVtopGetClientVtopClientLogin(
      {required VtopClient client});

  Future<VtopConfig> crateApiVtopVtopConfigVtopConfigDefault();

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_ArcJar;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_ArcJar;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcJarPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SessionManager;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SessionManager;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SessionManagerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopClient;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VtopClientPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopClientBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopClientBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResult;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResult;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VtopResultPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultFacultyDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultFacultyDetails;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultFacultyDetailsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultGetFaculty;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultGetFaculty;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultGetFacultyPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultGradeHistoryVecGradeCourseHistory;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultGradeHistoryVecGradeCourseHistory;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultGradeHistoryVecGradeCourseHistoryPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultHostelLeaveData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultHostelLeaveData;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultHostelLeaveDataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultHostelOutingData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultHostelOutingData;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultHostelOutingDataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultSemesterData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultSemesterData;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultSemesterDataPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultString;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultStringPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultStudentProfile;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultStudentProfile;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultStudentProfilePtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecAttendanceDetailRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecAttendanceDetailRecord;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultVecAttendanceDetailRecordPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecAttendanceRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecAttendanceRecord;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultVecAttendanceRecordPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecBiometricRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecBiometricRecord;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultVecBiometricRecordPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecMarksRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecMarksRecord;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultVecMarksRecordPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecPaidPaymentReceipt;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecPaidPaymentReceipt;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultVecPaidPaymentReceiptPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecPendingPaymentReceipt;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecPendingPaymentReceipt;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultVecPendingPaymentReceiptPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecPerExamScheduleRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecPerExamScheduleRecord;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultVecPerExamScheduleRecordPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecTimetableSlot;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecTimetableSlot;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultVecTimetableSlotPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecU8;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecU8;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_VtopResultVecU8Ptr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerClear(
      {required SessionManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopSessionManagerSessionManagerClearConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopSessionManagerSessionManagerClearConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_clear",
        argNames: ["that"],
      );

  @override
  Future<ArcJar> crateApiVtopSessionManagerSessionManagerGetCookieStore(
      {required SessionManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiVtopSessionManagerSessionManagerGetCookieStoreConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopSessionManagerSessionManagerGetCookieStoreConstMeta =>
          const TaskConstMeta(
            debugName: "SessionManager_get_cookie_store",
            argNames: ["that"],
          );

  @override
  Future<String?> crateApiVtopSessionManagerSessionManagerGetCsrfToken(
      {required SessionManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopSessionManagerSessionManagerGetCsrfTokenConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopSessionManagerSessionManagerGetCsrfTokenConstMeta =>
          const TaskConstMeta(
            debugName: "SessionManager_get_csrf_token",
            argNames: ["that"],
          );

  @override
  Future<bool> crateApiVtopSessionManagerSessionManagerIsAuthenticated(
      {required SessionManager that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiVtopSessionManagerSessionManagerIsAuthenticatedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopSessionManagerSessionManagerIsAuthenticatedConstMeta =>
          const TaskConstMeta(
            debugName: "SessionManager_is_authenticated",
            argNames: ["that"],
          );

  @override
  Future<SessionManager> crateApiVtopSessionManagerSessionManagerNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopSessionManagerSessionManagerNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopSessionManagerSessionManagerNewConstMeta =>
      const TaskConstMeta(
        debugName: "SessionManager_new",
        argNames: [],
      );

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerSetAuthenticated(
      {required SessionManager that, required bool authenticated}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that, serializer);
        sse_encode_bool(authenticated, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiVtopSessionManagerSessionManagerSetAuthenticatedConstMeta,
      argValues: [that, authenticated],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopSessionManagerSessionManagerSetAuthenticatedConstMeta =>
          const TaskConstMeta(
            debugName: "SessionManager_set_authenticated",
            argNames: ["that", "authenticated"],
          );

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerSetCsrfFromExternal(
      {required SessionManager that, required String token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that, serializer);
        sse_encode_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiVtopSessionManagerSessionManagerSetCsrfFromExternalConstMeta,
      argValues: [that, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopSessionManagerSessionManagerSetCsrfFromExternalConstMeta =>
          const TaskConstMeta(
            debugName: "SessionManager_set_csrf_from_external",
            argNames: ["that", "token"],
          );

  @override
  Future<void> crateApiVtopSessionManagerSessionManagerSetCsrfToken(
      {required SessionManager that, required String token}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            that, serializer);
        sse_encode_String(token, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopSessionManagerSessionManagerSetCsrfTokenConstMeta,
      argValues: [that, token],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopSessionManagerSessionManagerSetCsrfTokenConstMeta =>
          const TaskConstMeta(
            debugName: "SessionManager_set_csrf_token",
            argNames: ["that", "token"],
          );

  @override
  Future<VtopClient> crateApiVtopVtopConfigVtopClientBuilderBuild(
      {required VtopClientBuilder that,
      required String username,
      required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
            that, serializer);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopConfigVtopClientBuilderBuildConstMeta,
      argValues: [that, username, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopConfigVtopClientBuilderBuildConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClientBuilder_build",
        argNames: ["that", "username", "password"],
      );

  @override
  Future<VtopClientBuilder> crateApiVtopVtopConfigVtopClientBuilderNew() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopConfigVtopClientBuilderNewConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopConfigVtopClientBuilderNewConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClientBuilder_new",
        argNames: [],
      );

  @override
  Future<VtopResultString>
      crateApiVtopVtopClientVtopClientDownloadPaymentReceipt(
          {required VtopClient that,
          required String receiptNo,
          required String applno}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(receiptNo, serializer);
        sse_encode_String(applno, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiVtopVtopClientVtopClientDownloadPaymentReceiptConstMeta,
      argValues: [that, receiptNo, applno],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientDownloadPaymentReceiptConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_download_payment_receipt",
            argNames: ["that", "receiptNo", "applno"],
          );

  @override
  Future<VtopResultVecAttendanceRecord>
      crateApiVtopVtopClientVtopClientGetAttendance(
          {required VtopClient that, required String semesterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(semesterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceRecord,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetAttendanceConstMeta,
      argValues: [that, semesterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_attendance",
        argNames: ["that", "semesterId"],
      );

  @override
  Future<VtopResultVecAttendanceDetailRecord>
      crateApiVtopVtopClientVtopClientGetAttendanceDetail(
          {required VtopClient that,
          required String semesterId,
          required String courseId,
          required String courseType}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(semesterId, serializer);
        sse_encode_String(courseId, serializer);
        sse_encode_String(courseType, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceDetailRecord,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetAttendanceDetailConstMeta,
      argValues: [that, semesterId, courseId, courseType],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientGetAttendanceDetailConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_get_attendance_detail",
            argNames: ["that", "semesterId", "courseId", "courseType"],
          );

  @override
  Future<VtopResultVecBiometricRecord>
      crateApiVtopVtopClientVtopClientGetBiometricData(
          {required VtopClient that, required String date}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(date, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 14, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecBiometricRecord,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetBiometricDataConstMeta,
      argValues: [that, date],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientGetBiometricDataConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_get_biometric_data",
            argNames: ["that", "date"],
          );

  @override
  Future<VtopResultVecU8> crateApiVtopVtopClientVtopClientGetCookie(
      {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 15, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetCookieConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetCookieConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_cookie",
        argNames: ["that"],
      );

  @override
  Future<VtopResultVecPerExamScheduleRecord>
      crateApiVtopVtopClientVtopClientGetExamSchedule(
          {required VtopClient that, required String semesterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(semesterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 16, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPerExamScheduleRecord,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetExamScheduleConstMeta,
      argValues: [that, semesterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetExamScheduleConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_exam_schedule",
        argNames: ["that", "semesterId"],
      );

  @override
  Future<VtopResultFacultyDetails>
      crateApiVtopVtopClientVtopClientGetFacultyData(
          {required VtopClient that, required String empId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(empId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 17, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFacultyDetails,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetFacultyDataConstMeta,
      argValues: [that, empId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetFacultyDataConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_faculty_data",
        argNames: ["that", "empId"],
      );

  @override
  Future<VtopResultGetFaculty> crateApiVtopVtopClientVtopClientGetFacultySearch(
      {required VtopClient that, required String searchTerm}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(searchTerm, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 18, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGetFaculty,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetFacultySearchConstMeta,
      argValues: [that, searchTerm],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientGetFacultySearchConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_get_faculty_search",
            argNames: ["that", "searchTerm"],
          );

  @override
  Future<VtopResultGradeHistoryVecGradeCourseHistory>
      crateApiVtopVtopClientVtopClientGetGradeHistory(
          {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 19, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGradeHistoryVecGradeCourseHistory,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetGradeHistoryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetGradeHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_grade_history",
        argNames: ["that"],
      );

  @override
  Future<VtopResultVecU8> crateApiVtopVtopClientVtopClientGetHostelLeavePdf(
      {required VtopClient that, required String leaveId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(leaveId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 20, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetHostelLeavePdfConstMeta,
      argValues: [that, leaveId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientGetHostelLeavePdfConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_get_hostel_leave_pdf",
            argNames: ["that", "leaveId"],
          );

  @override
  Future<VtopResultHostelLeaveData>
      crateApiVtopVtopClientVtopClientGetHostelLeaveReport(
          {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 21, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelLeaveData,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetHostelLeaveReportConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientGetHostelLeaveReportConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_get_hostel_leave_report",
            argNames: ["that"],
          );

  @override
  Future<VtopResultVecU8> crateApiVtopVtopClientVtopClientGetHostelOutingPdf(
      {required VtopClient that, required String bookingId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(bookingId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 22, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetHostelOutingPdfConstMeta,
      argValues: [that, bookingId],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientGetHostelOutingPdfConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_get_hostel_outing_pdf",
            argNames: ["that", "bookingId"],
          );

  @override
  Future<VtopResultHostelOutingData>
      crateApiVtopVtopClientVtopClientGetHostelReport(
          {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 23, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelOutingData,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetHostelReportConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetHostelReportConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_hostel_report",
        argNames: ["that"],
      );

  @override
  Future<VtopResultVecMarksRecord> crateApiVtopVtopClientVtopClientGetMarks(
      {required VtopClient that, required String semesterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(semesterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 24, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecMarksRecord,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetMarksConstMeta,
      argValues: [that, semesterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetMarksConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_marks",
        argNames: ["that", "semesterId"],
      );

  @override
  Future<VtopResultVecPaidPaymentReceipt>
      crateApiVtopVtopClientVtopClientGetPaymentReceipts(
          {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 25, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPaidPaymentReceipt,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetPaymentReceiptsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientGetPaymentReceiptsConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_get_payment_receipts",
            argNames: ["that"],
          );

  @override
  Future<VtopResultVecPendingPaymentReceipt>
      crateApiVtopVtopClientVtopClientGetPendingPayment(
          {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 26, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPendingPaymentReceipt,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetPendingPaymentConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientGetPendingPaymentConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_get_pending_payment",
            argNames: ["that"],
          );

  @override
  Future<VtopResultSemesterData> crateApiVtopVtopClientVtopClientGetSemesters(
      {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 27, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetSemestersConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetSemestersConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_semesters",
        argNames: ["that"],
      );

  @override
  Future<VtopResultStudentProfile>
      crateApiVtopVtopClientVtopClientGetStudentProfile(
          {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 28, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultStudentProfile,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetStudentProfileConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientGetStudentProfileConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_get_student_profile",
            argNames: ["that"],
          );

  @override
  Future<VtopResultVecTimetableSlot>
      crateApiVtopVtopClientVtopClientGetTimetable(
          {required VtopClient that, required String semesterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(semesterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 29, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecTimetableSlot,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientGetTimetableConstMeta,
      argValues: [that, semesterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientGetTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_get_timetable",
        argNames: ["that", "semesterId"],
      );

  @override
  Future<bool> crateApiVtopVtopClientVtopClientIsAuthenticated(
      {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 30, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientIsAuthenticatedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientIsAuthenticatedConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_is_authenticated",
        argNames: ["that"],
      );

  @override
  Future<VtopResult> crateApiVtopVtopClientVtopClientLogin(
      {required VtopClient that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 31, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientLoginConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientLoginConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_login",
        argNames: ["that"],
      );

  @override
  Future<VtopResultString> crateApiVtopVtopClientVtopClientSubmitOutingForm(
      {required VtopClient that,
      required String purposeOfVisit,
      required String outingDate,
      required String contactNumber,
      required String outPlace,
      required String outTime}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            that, serializer);
        sse_encode_String(purposeOfVisit, serializer);
        sse_encode_String(outingDate, serializer);
        sse_encode_String(contactNumber, serializer);
        sse_encode_String(outPlace, serializer);
        sse_encode_String(outTime, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 32, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientSubmitOutingFormConstMeta,
      argValues: [
        that,
        purposeOfVisit,
        outingDate,
        contactNumber,
        outPlace,
        outTime
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopVtopClientVtopClientSubmitOutingFormConstMeta =>
          const TaskConstMeta(
            debugName: "VtopClient_submit_outing_form",
            argNames: [
              "that",
              "purposeOfVisit",
              "outingDate",
              "contactNumber",
              "outPlace",
              "outTime"
            ],
          );

  @override
  Future<VtopClient> crateApiVtopVtopClientVtopClientWithConfig(
      {required VtopConfig config,
      required SessionManager session,
      required String username,
      required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_vtop_config(config, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
            session, serializer);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 33, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopClientVtopClientWithConfigConstMeta,
      argValues: [config, session, username, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopClientVtopClientWithConfigConstMeta =>
      const TaskConstMeta(
        debugName: "VtopClient_with_config",
        argNames: ["config", "session", "username", "password"],
      );

  @override
  Future<ComprehensiveDataResponse> crateApiVtopGetClientFetchAllData(
      {required VtopClient client, required String semesterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(semesterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 34, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_comprehensive_data_response,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchAllDataConstMeta,
      argValues: [client, semesterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchAllDataConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_all_data",
        argNames: ["client", "semesterId"],
      );

  @override
  Future<List<AttendanceRecord>> crateApiVtopGetClientFetchAttendance(
      {required VtopClient client, required String semesterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(semesterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 35, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_attendance_record,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchAttendanceConstMeta,
      argValues: [client, semesterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_attendance",
        argNames: ["client", "semesterId"],
      );

  @override
  Future<List<AttendanceDetailRecord>>
      crateApiVtopGetClientFetchAttendanceDetail(
          {required VtopClient client,
          required String semesterId,
          required String courseId,
          required String courseType}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(semesterId, serializer);
        sse_encode_String(courseId, serializer);
        sse_encode_String(courseType, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 36, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_attendance_detail_record,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchAttendanceDetailConstMeta,
      argValues: [client, semesterId, courseId, courseType],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchAttendanceDetailConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_attendance_detail",
        argNames: ["client", "semesterId", "courseId", "courseType"],
      );

  @override
  Future<List<BiometricRecord>> crateApiVtopGetClientFetchBiometricData(
      {required VtopClient client, required String date}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(date, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 37, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_biometric_record,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchBiometricDataConstMeta,
      argValues: [client, date],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchBiometricDataConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_biometric_data",
        argNames: ["client", "date"],
      );

  @override
  Future<Uint8List> crateApiVtopGetClientFetchCookies(
      {required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 38, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchCookiesConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchCookiesConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_cookies",
        argNames: ["client"],
      );

  @override
  Future<List<PerExamScheduleRecord>> crateApiVtopGetClientFetchExamShedule(
      {required VtopClient client, required String semesterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(semesterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 39, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_per_exam_schedule_record,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchExamSheduleConstMeta,
      argValues: [client, semesterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchExamSheduleConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_exam_shedule",
        argNames: ["client", "semesterId"],
      );

  @override
  Future<FacultyDetails> crateApiVtopGetClientFetchFacultyData(
      {required VtopClient client, required String empId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(empId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 40, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_faculty_details,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchFacultyDataConstMeta,
      argValues: [client, empId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchFacultyDataConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_faculty_data",
        argNames: ["client", "empId"],
      );

  @override
  Future<GetFaculty> crateApiVtopGetClientFetchFacultySearch(
      {required VtopClient client, required String searchTerm}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(searchTerm, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 41, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_get_faculty,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchFacultySearchConstMeta,
      argValues: [client, searchTerm],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchFacultySearchConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_faculty_search",
        argNames: ["client", "searchTerm"],
      );

  @override
  Future<(GradeHistory, List<GradeCourseHistory>)>
      crateApiVtopGetClientFetchGradeHistory({required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 42, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_grade_history_list_grade_course_history,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchGradeHistoryConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchGradeHistoryConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_grade_history",
        argNames: ["client"],
      );

  @override
  Future<Uint8List> crateApiVtopGetClientFetchHostelOuting(
      {required VtopClient client, required String bookingId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(bookingId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 43, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchHostelOutingConstMeta,
      argValues: [client, bookingId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchHostelOutingConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_hostel_outing",
        argNames: ["client", "bookingId"],
      );

  @override
  Future<HostelOutingData> crateApiVtopGetClientFetchHostelReport(
      {required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 44, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_hostel_outing_data,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchHostelReportConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchHostelReportConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_hostel_report",
        argNames: ["client"],
      );

  @override
  Future<bool> crateApiVtopGetClientFetchIsAuth({required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 45, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopGetClientFetchIsAuthConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchIsAuthConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_is_auth",
        argNames: ["client"],
      );

  @override
  Future<List<MarksRecord>> crateApiVtopGetClientFetchMarks(
      {required VtopClient client, required String semesterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(semesterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 46, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_marks_record,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchMarksConstMeta,
      argValues: [client, semesterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchMarksConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_marks",
        argNames: ["client", "semesterId"],
      );

  @override
  Future<List<PaidPaymentReceipt>> crateApiVtopGetClientFetchPaymentReceipts(
      {required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 47, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_paid_payment_receipt,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchPaymentReceiptsConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchPaymentReceiptsConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_payment_receipts",
        argNames: ["client"],
      );

  @override
  Future<List<PendingPaymentReceipt>> crateApiVtopGetClientFetchPendingPayments(
      {required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 48, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_pending_payment_receipt,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchPendingPaymentsConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchPendingPaymentsConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_pending_payments",
        argNames: ["client"],
      );

  @override
  Future<SemesterData> crateApiVtopGetClientFetchSemesters(
      {required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 49, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_semester_data,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchSemestersConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchSemestersConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_semesters",
        argNames: ["client"],
      );

  @override
  Future<StudentProfile> crateApiVtopGetClientFetchStudentProfile(
      {required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 50, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_student_profile,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchStudentProfileConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchStudentProfileConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_student_profile",
        argNames: ["client"],
      );

  @override
  Future<List<TimetableSlot>> crateApiVtopGetClientFetchTimetable(
      {required VtopClient client, required String semesterId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(semesterId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 51, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_timetable_slot,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientFetchTimetableConstMeta,
      argValues: [client, semesterId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_timetable",
        argNames: ["client", "semesterId"],
      );

  @override
  Future<(bool, String)> crateApiVtopGetClientFetchWifi(
      {required String username, required String password, required int i}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        sse_encode_i_32(i, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 52, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_bool_string,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopGetClientFetchWifiConstMeta,
      argValues: [username, password, i],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientFetchWifiConstMeta =>
      const TaskConstMeta(
        debugName: "fetch_wifi",
        argNames: ["username", "password", "i"],
      );

  @override
  VtopClient crateApiVtopGetClientGetVtopClient(
      {required String username, required String password}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopGetClientGetVtopClientConstMeta,
      argValues: [username, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientGetVtopClientConstMeta =>
      const TaskConstMeta(
        debugName: "get_vtop_client",
        argNames: ["username", "password"],
      );

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 55, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiSimpleInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<HostelLeaveData> crateApiVtopGetClientLeaveReport(
      {required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 56, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_hostel_leave_data,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientLeaveReportConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientLeaveReportConstMeta =>
      const TaskConstMeta(
        debugName: "leave_report",
        argNames: ["client"],
      );

  @override
  Future<Uint8List> crateApiVtopGetClientLeaveReportDownload(
      {required VtopClient client, required String leaveId}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(leaveId, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 57, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientLeaveReportDownloadConstMeta,
      argValues: [client, leaveId],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientLeaveReportDownloadConstMeta =>
      const TaskConstMeta(
        debugName: "leave_report_download",
        argNames: ["client", "leaveId"],
      );

  @override
  Future<List<AttendanceRecord>> crateApiVtopParserParseattnParseAttendance(
      {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 58, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_attendance_record,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserParseattnParseAttendanceConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopParserParseattnParseAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "parse_attendance",
        argNames: ["html"],
      );

  @override
  Future<List<BiometricRecord>>
      crateApiVtopParserParsebiometricParseBiometricData(
          {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 59, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_biometric_record,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserParsebiometricParseBiometricDataConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopParserParsebiometricParseBiometricDataConstMeta =>
          const TaskConstMeta(
            debugName: "parse_biometric_data",
            argNames: ["html"],
          );

  @override
  Future<FacultyDetails> crateApiVtopParserFacultyParseaboutParseFacultyData(
      {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 60, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_faculty_details,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserFacultyParseaboutParseFacultyDataConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopParserFacultyParseaboutParseFacultyDataConstMeta =>
          const TaskConstMeta(
            debugName: "parse_faculty_data",
            argNames: ["html"],
          );

  @override
  Future<GetFaculty> crateApiVtopParserFacultyParsesearchParseFacultySearch(
      {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 61, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_get_faculty,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiVtopParserFacultyParsesearchParseFacultySearchConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopParserFacultyParsesearchParseFacultySearchConstMeta =>
          const TaskConstMeta(
            debugName: "parse_faculty_search",
            argNames: ["html"],
          );

  @override
  Future<List<AttendanceDetailRecord>>
      crateApiVtopParserParseattnParseFullAttendance({required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 62, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_attendance_detail_record,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserParseattnParseFullAttendanceConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopParserParseattnParseFullAttendanceConstMeta =>
      const TaskConstMeta(
        debugName: "parse_full_attendance",
        argNames: ["html"],
      );

  @override
  Future<(GradeHistory, List<GradeCourseHistory>)>
      crateApiVtopParserParsegradehistoryParseGradeHistory(
          {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 63, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_record_grade_history_list_grade_course_history,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserParsegradehistoryParseGradeHistoryConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopParserParsegradehistoryParseGradeHistoryConstMeta =>
          const TaskConstMeta(
            debugName: "parse_grade_history",
            argNames: ["html"],
          );

  @override
  Future<HostelLeaveData> crateApiVtopParserHostelParseleaveParseHostelLeave(
      {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 64, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_hostel_leave_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserHostelParseleaveParseHostelLeaveConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopParserHostelParseleaveParseHostelLeaveConstMeta =>
          const TaskConstMeta(
            debugName: "parse_hostel_leave",
            argNames: ["html"],
          );

  @override
  Future<HostelOutingData>
      crateApiVtopParserHostelParseoutingsParseHostelOuting(
          {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 65, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_hostel_outing_data,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiVtopParserHostelParseoutingsParseHostelOutingConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopParserHostelParseoutingsParseHostelOutingConstMeta =>
          const TaskConstMeta(
            debugName: "parse_hostel_outing",
            argNames: ["html"],
          );

  @override
  Future<List<MarksRecord>> crateApiVtopParserParsemarksParseMarks(
      {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 66, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_marks_record,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserParsemarksParseMarksConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopParserParsemarksParseMarksConstMeta =>
      const TaskConstMeta(
        debugName: "parse_marks",
        argNames: ["html"],
      );

  @override
  Future<List<PaidPaymentReceipt>>
      crateApiVtopParserParsepaymentreceiptsParsePaymentReceipts(
          {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 67, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_paid_payment_receipt,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiVtopParserParsepaymentreceiptsParsePaymentReceiptsConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopParserParsepaymentreceiptsParsePaymentReceiptsConstMeta =>
          const TaskConstMeta(
            debugName: "parse_payment_receipts",
            argNames: ["html"],
          );

  @override
  Future<List<PendingPaymentReceipt>>
      crateApiVtopParserParsependingpaymentsParsePendingPayments(
          {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 68, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_pending_payment_receipt,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiVtopParserParsependingpaymentsParsePendingPaymentsConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopParserParsependingpaymentsParsePendingPaymentsConstMeta =>
          const TaskConstMeta(
            debugName: "parse_pending_payments",
            argNames: ["html"],
          );

  @override
  Future<List<PerExamScheduleRecord>> crateApiVtopParserParseschedParseSchedule(
      {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 69, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_per_exam_schedule_record,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserParseschedParseScheduleConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopParserParseschedParseScheduleConstMeta =>
      const TaskConstMeta(
        debugName: "parse_schedule",
        argNames: ["html"],
      );

  @override
  Future<SemesterData> crateApiVtopParserParsettParseSemidTimetable(
      {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 70, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_semester_data,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserParsettParseSemidTimetableConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopParserParsettParseSemidTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "parse_semid_timetable",
        argNames: ["html"],
      );

  @override
  Future<StudentProfile> crateApiVtopParserParseprofileParseStudentProfile(
      {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 71, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_student_profile,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserParseprofileParseStudentProfileConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopParserParseprofileParseStudentProfileConstMeta =>
          const TaskConstMeta(
            debugName: "parse_student_profile",
            argNames: ["html"],
          );

  @override
  Future<List<TimetableSlot>> crateApiVtopParserParsettParseTimetable(
      {required String html}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(html, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 72, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_timetable_slot,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopParserParsettParseTimetableConstMeta,
      argValues: [html],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopParserParsettParseTimetableConstMeta =>
      const TaskConstMeta(
        debugName: "parse_timetable",
        argNames: ["html"],
      );

  @override
  Future<String> crateApiVtopGetClientStudentPaymentReceiptDownload(
      {required VtopClient client,
      required String receiptNo,
      required String applno}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(receiptNo, serializer);
        sse_encode_String(applno, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 73, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientStudentPaymentReceiptDownloadConstMeta,
      argValues: [client, receiptNo, applno],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiVtopGetClientStudentPaymentReceiptDownloadConstMeta =>
          const TaskConstMeta(
            debugName: "student_payment_receipt_download",
            argNames: ["client", "receiptNo", "applno"],
          );

  @override
  Future<String> crateApiVtopGetClientSubmitHostelOutingForm(
      {required VtopClient client,
      required String purposeOfVisit,
      required String outingDate,
      required String contactNumber,
      required String outPlace,
      required String outTime}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        sse_encode_String(purposeOfVisit, serializer);
        sse_encode_String(outingDate, serializer);
        sse_encode_String(contactNumber, serializer);
        sse_encode_String(outPlace, serializer);
        sse_encode_String(outTime, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 74, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientSubmitHostelOutingFormConstMeta,
      argValues: [
        client,
        purposeOfVisit,
        outingDate,
        contactNumber,
        outPlace,
        outTime
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientSubmitHostelOutingFormConstMeta =>
      const TaskConstMeta(
        debugName: "submit_hostel_outing_form",
        argNames: [
          "client",
          "purposeOfVisit",
          "outingDate",
          "contactNumber",
          "outPlace",
          "outTime"
        ],
      );

  @override
  Future<(bool, String)> crateApiVtopWifiUniversityWifiLoginLogout(
      {required int i, required String username, required String password}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_32(i, serializer);
        sse_encode_String(username, serializer);
        sse_encode_String(password, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 75, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_bool_string,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopWifiUniversityWifiLoginLogoutConstMeta,
      argValues: [i, username, password],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopWifiUniversityWifiLoginLogoutConstMeta =>
      const TaskConstMeta(
        debugName: "university_wifi_login_logout",
        argNames: ["i", "username", "password"],
      );

  @override
  Future<void> crateApiVtopGetClientVtopClientLogin(
      {required VtopClient client}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
            client, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 76, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_vtop_error,
      ),
      constMeta: kCrateApiVtopGetClientVtopClientLoginConstMeta,
      argValues: [client],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopGetClientVtopClientLoginConstMeta =>
      const TaskConstMeta(
        debugName: "vtop_client_login",
        argNames: ["client"],
      );

  @override
  Future<VtopConfig> crateApiVtopVtopConfigVtopConfigDefault() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 77, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_vtop_config,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiVtopVtopConfigVtopConfigDefaultConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiVtopVtopConfigVtopConfigDefaultConstMeta =>
      const TaskConstMeta(
        debugName: "vtop_config_default",
        argNames: [],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcJar => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcJar => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SessionManager => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SessionManager => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopClient => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopClient => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopClientBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopClientBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResult => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResult => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultFacultyDetails => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFacultyDetails;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultFacultyDetails => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFacultyDetails;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultGetFaculty => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGetFaculty;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultGetFaculty => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGetFaculty;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultGradeHistoryVecGradeCourseHistory =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGradeHistoryVecGradeCourseHistory;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultGradeHistoryVecGradeCourseHistory =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGradeHistoryVecGradeCourseHistory;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultHostelLeaveData => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelLeaveData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultHostelLeaveData => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelLeaveData;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultHostelOutingData => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelOutingData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultHostelOutingData => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelOutingData;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultSemesterData => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultSemesterData => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultString => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultString => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultStudentProfile => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultStudentProfile;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultStudentProfile => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultStudentProfile;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecAttendanceDetailRecord =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceDetailRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecAttendanceDetailRecord =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceDetailRecord;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecAttendanceRecord => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecAttendanceRecord => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceRecord;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecBiometricRecord => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecBiometricRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecBiometricRecord => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecBiometricRecord;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecMarksRecord => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecMarksRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecMarksRecord => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecMarksRecord;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecPaidPaymentReceipt => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPaidPaymentReceipt;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecPaidPaymentReceipt => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPaidPaymentReceipt;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecPendingPaymentReceipt =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPendingPaymentReceipt;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecPendingPaymentReceipt =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPendingPaymentReceipt;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecPerExamScheduleRecord =>
          wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPerExamScheduleRecord;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecPerExamScheduleRecord =>
          wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPerExamScheduleRecord;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecTimetableSlot => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecTimetableSlot;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecTimetableSlot => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecTimetableSlot;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_VtopResultVecU8 => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_VtopResultVecU8 => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8;

  @protected
  ArcJar
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcJarImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionManager
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClient
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClientBuilder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResult
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultFacultyDetails
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFacultyDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultFacultyDetailsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultGetFaculty
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGetFaculty(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultGetFacultyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultGradeHistoryVecGradeCourseHistory
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGradeHistoryVecGradeCourseHistory(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultGradeHistoryVecGradeCourseHistoryImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultHostelLeaveData
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelLeaveData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultHostelLeaveDataImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultHostelOutingData
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelOutingData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultHostelOutingDataImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultSemesterData
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultSemesterDataImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultString
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultStudentProfile
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultStudentProfile(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultStudentProfileImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecAttendanceDetailRecord
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceDetailRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecAttendanceDetailRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecAttendanceRecord
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecAttendanceRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecBiometricRecord
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecBiometricRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecBiometricRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecMarksRecord
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecMarksRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecMarksRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecPaidPaymentReceipt
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPaidPaymentReceipt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecPaidPaymentReceiptImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecPendingPaymentReceipt
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPendingPaymentReceipt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecPendingPaymentReceiptImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecPerExamScheduleRecord
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPerExamScheduleRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecPerExamScheduleRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecTimetableSlot
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecTimetableSlot(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecTimetableSlotImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecU8
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecU8Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionManager
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClient
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionManager
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClient
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcJar
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcJarImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionManager
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClient
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopClientBuilder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResult
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultFacultyDetails
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFacultyDetails(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultFacultyDetailsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultGetFaculty
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGetFaculty(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultGetFacultyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultGradeHistoryVecGradeCourseHistory
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGradeHistoryVecGradeCourseHistory(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultGradeHistoryVecGradeCourseHistoryImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultHostelLeaveData
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelLeaveData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultHostelLeaveDataImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultHostelOutingData
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelOutingData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultHostelOutingDataImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultSemesterData
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultSemesterDataImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultString
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultStringImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VtopResultStudentProfile
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultStudentProfile(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultStudentProfileImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecAttendanceDetailRecord
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceDetailRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecAttendanceDetailRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecAttendanceRecord
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecAttendanceRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecBiometricRecord
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecBiometricRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecBiometricRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecMarksRecord
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecMarksRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecMarksRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecPaidPaymentReceipt
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPaidPaymentReceipt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecPaidPaymentReceiptImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecPendingPaymentReceipt
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPendingPaymentReceipt(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecPendingPaymentReceiptImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecPerExamScheduleRecord
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPerExamScheduleRecord(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecPerExamScheduleRecordImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecTimetableSlot
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecTimetableSlot(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecTimetableSlotImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  VtopResultVecU8
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VtopResultVecU8Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AttendanceDetailRecord dco_decode_attendance_detail_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return AttendanceDetailRecord(
      serial: dco_decode_String(arr[0]),
      date: dco_decode_String(arr[1]),
      slot: dco_decode_String(arr[2]),
      dayTime: dco_decode_String(arr[3]),
      status: dco_decode_String(arr[4]),
      remark: dco_decode_String(arr[5]),
    );
  }

  @protected
  AttendanceRecord dco_decode_attendance_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 12)
      throw Exception('unexpected arr length: expect 12 but see ${arr.length}');
    return AttendanceRecord(
      serial: dco_decode_String(arr[0]),
      category: dco_decode_String(arr[1]),
      courseName: dco_decode_String(arr[2]),
      courseCode: dco_decode_String(arr[3]),
      courseType: dco_decode_String(arr[4]),
      facultyDetail: dco_decode_String(arr[5]),
      classesAttended: dco_decode_String(arr[6]),
      totalClasses: dco_decode_String(arr[7]),
      attendancePercentage: dco_decode_String(arr[8]),
      attendanceFatCat: dco_decode_String(arr[9]),
      debarStatus: dco_decode_String(arr[10]),
      courseId: dco_decode_String(arr[11]),
    );
  }

  @protected
  BiometricRecord dco_decode_biometric_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return BiometricRecord(
      serial: dco_decode_String(arr[0]),
      date: dco_decode_String(arr[1]),
      day: dco_decode_String(arr[2]),
      inTime: dco_decode_String(arr[3]),
      outTime: dco_decode_String(arr[4]),
      duration: dco_decode_String(arr[5]),
      location: dco_decode_String(arr[6]),
    );
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  VtopConfig dco_decode_box_autoadd_vtop_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_vtop_config(raw);
  }

  @protected
  ComprehensiveDataResponse dco_decode_comprehensive_data_response(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ComprehensiveDataResponse(
      profile: dco_decode_student_profile(arr[0]),
      attendance: dco_decode_list_attendance_record(arr[1]),
      timetable: dco_decode_list_timetable_slot(arr[2]),
      examSchedule: dco_decode_list_per_exam_schedule_record(arr[3]),
      gradeCourseHistory: dco_decode_list_grade_course_history(arr[4]),
      marks: dco_decode_list_marks_record(arr[5]),
    );
  }

  @protected
  ExamScheduleRecord dco_decode_exam_schedule_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return ExamScheduleRecord(
      serial: dco_decode_String(arr[0]),
      slot: dco_decode_String(arr[1]),
      courseName: dco_decode_String(arr[2]),
      courseCode: dco_decode_String(arr[3]),
      courseType: dco_decode_String(arr[4]),
      courseId: dco_decode_String(arr[5]),
      examDate: dco_decode_String(arr[6]),
      examSession: dco_decode_String(arr[7]),
      reportingTime: dco_decode_String(arr[8]),
      examTime: dco_decode_String(arr[9]),
      venue: dco_decode_String(arr[10]),
      seatLocation: dco_decode_String(arr[11]),
      seatNo: dco_decode_String(arr[12]),
    );
  }

  @protected
  FacultyDetails dco_decode_faculty_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return FacultyDetails(
      name: dco_decode_String(arr[0]),
      designation: dco_decode_String(arr[1]),
      department: dco_decode_String(arr[2]),
      schoolCentre: dco_decode_String(arr[3]),
      email: dco_decode_String(arr[4]),
      cabinNumber: dco_decode_String(arr[5]),
      officeHours: dco_decode_list_office_hour(arr[6]),
    );
  }

  @protected
  GetFaculty dco_decode_get_faculty(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return GetFaculty(
      facultyName: dco_decode_String(arr[0]),
      designation: dco_decode_String(arr[1]),
      schoolOrCentre: dco_decode_String(arr[2]),
      empId: dco_decode_String(arr[3]),
    );
  }

  @protected
  GradeCourseHistory dco_decode_grade_course_history(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return GradeCourseHistory(
      courseCode: dco_decode_String(arr[0]),
      courseTitle: dco_decode_String(arr[1]),
      courseType: dco_decode_String(arr[2]),
      credits: dco_decode_String(arr[3]),
      grade: dco_decode_String(arr[4]),
      examMonth: dco_decode_String(arr[5]),
      courseDistribution: dco_decode_String(arr[6]),
    );
  }

  @protected
  GradeHistory dco_decode_grade_history(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return GradeHistory(
      creditsRegistered: dco_decode_String(arr[0]),
      creditsEarned: dco_decode_String(arr[1]),
      cgpa: dco_decode_String(arr[2]),
    );
  }

  @protected
  HostelLeaveData dco_decode_hostel_leave_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return HostelLeaveData(
      records: dco_decode_list_leave_record(arr[0]),
      updateTime: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  HostelOutingData dco_decode_hostel_outing_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return HostelOutingData(
      records: dco_decode_list_outing_record(arr[0]),
      updateTime: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  LeaveRecord dco_decode_leave_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return LeaveRecord(
      serial: dco_decode_String(arr[0]),
      registrationNumber: dco_decode_String(arr[1]),
      placeOfVisit: dco_decode_String(arr[2]),
      purposeOfVisit: dco_decode_String(arr[3]),
      fromDate: dco_decode_String(arr[4]),
      fromTime: dco_decode_String(arr[5]),
      toDate: dco_decode_String(arr[6]),
      toTime: dco_decode_String(arr[7]),
      status: dco_decode_String(arr[8]),
      canDownload: dco_decode_bool(arr[9]),
      leaveId: dco_decode_String(arr[10]),
    );
  }

  @protected
  List<AttendanceDetailRecord> dco_decode_list_attendance_detail_record(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_attendance_detail_record)
        .toList();
  }

  @protected
  List<AttendanceRecord> dco_decode_list_attendance_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_attendance_record).toList();
  }

  @protected
  List<BiometricRecord> dco_decode_list_biometric_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_biometric_record).toList();
  }

  @protected
  List<ExamScheduleRecord> dco_decode_list_exam_schedule_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_exam_schedule_record).toList();
  }

  @protected
  List<GradeCourseHistory> dco_decode_list_grade_course_history(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_grade_course_history).toList();
  }

  @protected
  List<LeaveRecord> dco_decode_list_leave_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_leave_record).toList();
  }

  @protected
  List<MarksRecord> dco_decode_list_marks_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_marks_record).toList();
  }

  @protected
  List<MarksRecordEach> dco_decode_list_marks_record_each(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_marks_record_each).toList();
  }

  @protected
  List<OfficeHour> dco_decode_list_office_hour(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_office_hour).toList();
  }

  @protected
  List<OutingRecord> dco_decode_list_outing_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_outing_record).toList();
  }

  @protected
  List<PaidPaymentReceipt> dco_decode_list_paid_payment_receipt(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_paid_payment_receipt).toList();
  }

  @protected
  List<PendingPaymentReceipt> dco_decode_list_pending_payment_receipt(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_pending_payment_receipt)
        .toList();
  }

  @protected
  List<PerExamScheduleRecord> dco_decode_list_per_exam_schedule_record(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_per_exam_schedule_record)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<SemesterInfo> dco_decode_list_semester_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_semester_info).toList();
  }

  @protected
  List<TimetableSlot> dco_decode_list_timetable_slot(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_timetable_slot).toList();
  }

  @protected
  MarksRecord dco_decode_marks_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return MarksRecord(
      serial: dco_decode_String(arr[0]),
      coursecode: dco_decode_String(arr[1]),
      coursetitle: dco_decode_String(arr[2]),
      coursetype: dco_decode_String(arr[3]),
      faculity: dco_decode_String(arr[4]),
      slot: dco_decode_String(arr[5]),
      marks: dco_decode_list_marks_record_each(arr[6]),
    );
  }

  @protected
  MarksRecordEach dco_decode_marks_record_each(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return MarksRecordEach(
      serial: dco_decode_String(arr[0]),
      markstitle: dco_decode_String(arr[1]),
      maxmarks: dco_decode_String(arr[2]),
      weightage: dco_decode_String(arr[3]),
      status: dco_decode_String(arr[4]),
      scoredmark: dco_decode_String(arr[5]),
      weightagemark: dco_decode_String(arr[6]),
      remark: dco_decode_String(arr[7]),
    );
  }

  @protected
  MentorDetails dco_decode_mentor_details(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return MentorDetails(
      facultyId: dco_decode_String(arr[0]),
      facultyName: dco_decode_String(arr[1]),
      facultyDesignation: dco_decode_String(arr[2]),
      school: dco_decode_String(arr[3]),
      cabin: dco_decode_String(arr[4]),
      facultyDepartment: dco_decode_String(arr[5]),
      facultyEmail: dco_decode_String(arr[6]),
      facultyIntercom: dco_decode_String(arr[7]),
      facultyMobileNumber: dco_decode_String(arr[8]),
    );
  }

  @protected
  OfficeHour dco_decode_office_hour(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OfficeHour(
      day: dco_decode_String(arr[0]),
      timings: dco_decode_String(arr[1]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  OutingRecord dco_decode_outing_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 13)
      throw Exception('unexpected arr length: expect 13 but see ${arr.length}');
    return OutingRecord(
      serial: dco_decode_String(arr[0]),
      registrationNumber: dco_decode_String(arr[1]),
      hostelBlock: dco_decode_String(arr[2]),
      roomNumber: dco_decode_String(arr[3]),
      placeOfVisit: dco_decode_String(arr[4]),
      purposeOfVisit: dco_decode_String(arr[5]),
      time: dco_decode_String(arr[6]),
      contactNumber: dco_decode_String(arr[7]),
      parentContactNumber: dco_decode_String(arr[8]),
      date: dco_decode_String(arr[9]),
      bookingId: dco_decode_String(arr[10]),
      status: dco_decode_String(arr[11]),
      canDownload: dco_decode_bool(arr[12]),
    );
  }

  @protected
  PaidPaymentReceipt dco_decode_paid_payment_receipt(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return PaidPaymentReceipt(
      receiptNumber: dco_decode_String(arr[0]),
      date: dco_decode_String(arr[1]),
      amount: dco_decode_String(arr[2]),
      campusCode: dco_decode_String(arr[3]),
      paymentStatus: dco_decode_String(arr[4]),
      receiptNo: dco_decode_String(arr[5]),
    );
  }

  @protected
  PendingPaymentReceipt dco_decode_pending_payment_receipt(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return PendingPaymentReceipt(
      sNo: dco_decode_String(arr[0]),
      fprefno: dco_decode_String(arr[1]),
      feesHeads: dco_decode_String(arr[2]),
      endDate: dco_decode_String(arr[3]),
      amount: dco_decode_String(arr[4]),
      fine: dco_decode_String(arr[5]),
      totalAmount: dco_decode_String(arr[6]),
      paymentStatus: dco_decode_String(arr[7]),
    );
  }

  @protected
  PerExamScheduleRecord dco_decode_per_exam_schedule_record(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PerExamScheduleRecord(
      records: dco_decode_list_exam_schedule_record(arr[0]),
      examType: dco_decode_String(arr[1]),
    );
  }

  @protected
  (bool, String) dco_decode_record_bool_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_bool(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (GradeHistory, List<GradeCourseHistory>)
      dco_decode_record_grade_history_list_grade_course_history(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_grade_history(arr[0]),
      dco_decode_list_grade_course_history(arr[1]),
    );
  }

  @protected
  SemesterData dco_decode_semester_data(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SemesterData(
      semesters: dco_decode_list_semester_info(arr[0]),
      updateTime: dco_decode_u_64(arr[1]),
    );
  }

  @protected
  SemesterInfo dco_decode_semester_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SemesterInfo(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
    );
  }

  @protected
  StudentProfile dco_decode_student_profile(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return StudentProfile(
      applicationNumber: dco_decode_String(arr[0]),
      studentName: dco_decode_String(arr[1]),
      dob: dco_decode_String(arr[2]),
      gender: dco_decode_String(arr[3]),
      bloodGroup: dco_decode_String(arr[4]),
      email: dco_decode_String(arr[5]),
      base64Pfp: dco_decode_String(arr[6]),
      gradeHistory: dco_decode_grade_history(arr[7]),
      mentorDetails: dco_decode_mentor_details(arr[8]),
    );
  }

  @protected
  TimetableSlot dco_decode_timetable_slot(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return TimetableSlot(
      serial: dco_decode_String(arr[0]),
      day: dco_decode_String(arr[1]),
      slot: dco_decode_String(arr[2]),
      courseCode: dco_decode_String(arr[3]),
      courseType: dco_decode_String(arr[4]),
      roomNo: dco_decode_String(arr[5]),
      block: dco_decode_String(arr[6]),
      startTime: dco_decode_String(arr[7]),
      endTime: dco_decode_String(arr[8]),
      name: dco_decode_String(arr[9]),
    );
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  VtopConfig dco_decode_vtop_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return VtopConfig(
      baseUrl: dco_decode_String(arr[0]),
      timeoutSeconds: dco_decode_u_64(arr[1]),
      userAgent: dco_decode_String(arr[2]),
    );
  }

  @protected
  VtopError dco_decode_vtop_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return VtopError_NetworkError();
      case 1:
        return VtopError_VtopServerError();
      case 2:
        return VtopError_AuthenticationFailed(
          dco_decode_String(raw[1]),
        );
      case 3:
        return VtopError_RegistrationParsingError();
      case 4:
        return VtopError_InvalidCredentials();
      case 5:
        return VtopError_SessionExpired();
      case 6:
        return VtopError_ParseError(
          dco_decode_String(raw[1]),
        );
      case 7:
        return VtopError_ConfigurationError(
          dco_decode_String(raw[1]),
        );
      case 8:
        return VtopError_CaptchaRequired();
      case 9:
        return VtopError_InvalidResponse();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ArcJar
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcJarImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SessionManager
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopClient
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopClientBuilder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResult
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultFacultyDetails
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFacultyDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultFacultyDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultGetFaculty
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGetFaculty(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultGetFacultyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultGradeHistoryVecGradeCourseHistory
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGradeHistoryVecGradeCourseHistory(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultGradeHistoryVecGradeCourseHistoryImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultHostelLeaveData
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelLeaveData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultHostelLeaveDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultHostelOutingData
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelOutingData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultHostelOutingDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultSemesterData
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultSemesterDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultString
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultStudentProfile
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultStudentProfile(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultStudentProfileImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecAttendanceDetailRecord
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceDetailRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecAttendanceDetailRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecAttendanceRecord
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecAttendanceRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecBiometricRecord
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecBiometricRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecBiometricRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecMarksRecord
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecMarksRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecMarksRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecPaidPaymentReceipt
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPaidPaymentReceipt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecPaidPaymentReceiptImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecPendingPaymentReceipt
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPendingPaymentReceipt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecPendingPaymentReceiptImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecPerExamScheduleRecord
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPerExamScheduleRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecPerExamScheduleRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecTimetableSlot
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecTimetableSlot(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecTimetableSlotImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecU8
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecU8Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SessionManager
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopClient
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SessionManager
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopClient
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcJar
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcJarImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SessionManager
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionManagerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopClient
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopClientBuilder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopClientBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResult
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultFacultyDetails
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFacultyDetails(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultFacultyDetailsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultGetFaculty
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGetFaculty(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultGetFacultyImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultGradeHistoryVecGradeCourseHistory
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGradeHistoryVecGradeCourseHistory(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultGradeHistoryVecGradeCourseHistoryImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultHostelLeaveData
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelLeaveData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultHostelLeaveDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultHostelOutingData
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelOutingData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultHostelOutingDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultSemesterData
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultSemesterDataImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultString
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultStringImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultStudentProfile
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultStudentProfile(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultStudentProfileImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecAttendanceDetailRecord
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceDetailRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecAttendanceDetailRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecAttendanceRecord
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecAttendanceRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecBiometricRecord
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecBiometricRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecBiometricRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecMarksRecord
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecMarksRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecMarksRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecPaidPaymentReceipt
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPaidPaymentReceipt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecPaidPaymentReceiptImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecPendingPaymentReceipt
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPendingPaymentReceipt(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecPendingPaymentReceiptImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecPerExamScheduleRecord
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPerExamScheduleRecord(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecPerExamScheduleRecordImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecTimetableSlot
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecTimetableSlot(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecTimetableSlotImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  VtopResultVecU8
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VtopResultVecU8Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AttendanceDetailRecord sse_decode_attendance_detail_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_date = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_dayTime = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_remark = sse_decode_String(deserializer);
    return AttendanceDetailRecord(
        serial: var_serial,
        date: var_date,
        slot: var_slot,
        dayTime: var_dayTime,
        status: var_status,
        remark: var_remark);
  }

  @protected
  AttendanceRecord sse_decode_attendance_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_category = sse_decode_String(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_facultyDetail = sse_decode_String(deserializer);
    var var_classesAttended = sse_decode_String(deserializer);
    var var_totalClasses = sse_decode_String(deserializer);
    var var_attendancePercentage = sse_decode_String(deserializer);
    var var_attendanceFatCat = sse_decode_String(deserializer);
    var var_debarStatus = sse_decode_String(deserializer);
    var var_courseId = sse_decode_String(deserializer);
    return AttendanceRecord(
        serial: var_serial,
        category: var_category,
        courseName: var_courseName,
        courseCode: var_courseCode,
        courseType: var_courseType,
        facultyDetail: var_facultyDetail,
        classesAttended: var_classesAttended,
        totalClasses: var_totalClasses,
        attendancePercentage: var_attendancePercentage,
        attendanceFatCat: var_attendanceFatCat,
        debarStatus: var_debarStatus,
        courseId: var_courseId);
  }

  @protected
  BiometricRecord sse_decode_biometric_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_date = sse_decode_String(deserializer);
    var var_day = sse_decode_String(deserializer);
    var var_inTime = sse_decode_String(deserializer);
    var var_outTime = sse_decode_String(deserializer);
    var var_duration = sse_decode_String(deserializer);
    var var_location = sse_decode_String(deserializer);
    return BiometricRecord(
        serial: var_serial,
        date: var_date,
        day: var_day,
        inTime: var_inTime,
        outTime: var_outTime,
        duration: var_duration,
        location: var_location);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  VtopConfig sse_decode_box_autoadd_vtop_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_vtop_config(deserializer));
  }

  @protected
  ComprehensiveDataResponse sse_decode_comprehensive_data_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_profile = sse_decode_student_profile(deserializer);
    var var_attendance = sse_decode_list_attendance_record(deserializer);
    var var_timetable = sse_decode_list_timetable_slot(deserializer);
    var var_examSchedule =
        sse_decode_list_per_exam_schedule_record(deserializer);
    var var_gradeCourseHistory =
        sse_decode_list_grade_course_history(deserializer);
    var var_marks = sse_decode_list_marks_record(deserializer);
    return ComprehensiveDataResponse(
        profile: var_profile,
        attendance: var_attendance,
        timetable: var_timetable,
        examSchedule: var_examSchedule,
        gradeCourseHistory: var_gradeCourseHistory,
        marks: var_marks);
  }

  @protected
  ExamScheduleRecord sse_decode_exam_schedule_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_courseId = sse_decode_String(deserializer);
    var var_examDate = sse_decode_String(deserializer);
    var var_examSession = sse_decode_String(deserializer);
    var var_reportingTime = sse_decode_String(deserializer);
    var var_examTime = sse_decode_String(deserializer);
    var var_venue = sse_decode_String(deserializer);
    var var_seatLocation = sse_decode_String(deserializer);
    var var_seatNo = sse_decode_String(deserializer);
    return ExamScheduleRecord(
        serial: var_serial,
        slot: var_slot,
        courseName: var_courseName,
        courseCode: var_courseCode,
        courseType: var_courseType,
        courseId: var_courseId,
        examDate: var_examDate,
        examSession: var_examSession,
        reportingTime: var_reportingTime,
        examTime: var_examTime,
        venue: var_venue,
        seatLocation: var_seatLocation,
        seatNo: var_seatNo);
  }

  @protected
  FacultyDetails sse_decode_faculty_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_designation = sse_decode_String(deserializer);
    var var_department = sse_decode_String(deserializer);
    var var_schoolCentre = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_cabinNumber = sse_decode_String(deserializer);
    var var_officeHours = sse_decode_list_office_hour(deserializer);
    return FacultyDetails(
        name: var_name,
        designation: var_designation,
        department: var_department,
        schoolCentre: var_schoolCentre,
        email: var_email,
        cabinNumber: var_cabinNumber,
        officeHours: var_officeHours);
  }

  @protected
  GetFaculty sse_decode_get_faculty(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_facultyName = sse_decode_String(deserializer);
    var var_designation = sse_decode_String(deserializer);
    var var_schoolOrCentre = sse_decode_String(deserializer);
    var var_empId = sse_decode_String(deserializer);
    return GetFaculty(
        facultyName: var_facultyName,
        designation: var_designation,
        schoolOrCentre: var_schoolOrCentre,
        empId: var_empId);
  }

  @protected
  GradeCourseHistory sse_decode_grade_course_history(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseTitle = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_credits = sse_decode_String(deserializer);
    var var_grade = sse_decode_String(deserializer);
    var var_examMonth = sse_decode_String(deserializer);
    var var_courseDistribution = sse_decode_String(deserializer);
    return GradeCourseHistory(
        courseCode: var_courseCode,
        courseTitle: var_courseTitle,
        courseType: var_courseType,
        credits: var_credits,
        grade: var_grade,
        examMonth: var_examMonth,
        courseDistribution: var_courseDistribution);
  }

  @protected
  GradeHistory sse_decode_grade_history(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_creditsRegistered = sse_decode_String(deserializer);
    var var_creditsEarned = sse_decode_String(deserializer);
    var var_cgpa = sse_decode_String(deserializer);
    return GradeHistory(
        creditsRegistered: var_creditsRegistered,
        creditsEarned: var_creditsEarned,
        cgpa: var_cgpa);
  }

  @protected
  HostelLeaveData sse_decode_hostel_leave_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_records = sse_decode_list_leave_record(deserializer);
    var var_updateTime = sse_decode_u_64(deserializer);
    return HostelLeaveData(records: var_records, updateTime: var_updateTime);
  }

  @protected
  HostelOutingData sse_decode_hostel_outing_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_records = sse_decode_list_outing_record(deserializer);
    var var_updateTime = sse_decode_u_64(deserializer);
    return HostelOutingData(records: var_records, updateTime: var_updateTime);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  LeaveRecord sse_decode_leave_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_registrationNumber = sse_decode_String(deserializer);
    var var_placeOfVisit = sse_decode_String(deserializer);
    var var_purposeOfVisit = sse_decode_String(deserializer);
    var var_fromDate = sse_decode_String(deserializer);
    var var_fromTime = sse_decode_String(deserializer);
    var var_toDate = sse_decode_String(deserializer);
    var var_toTime = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_canDownload = sse_decode_bool(deserializer);
    var var_leaveId = sse_decode_String(deserializer);
    return LeaveRecord(
        serial: var_serial,
        registrationNumber: var_registrationNumber,
        placeOfVisit: var_placeOfVisit,
        purposeOfVisit: var_purposeOfVisit,
        fromDate: var_fromDate,
        fromTime: var_fromTime,
        toDate: var_toDate,
        toTime: var_toTime,
        status: var_status,
        canDownload: var_canDownload,
        leaveId: var_leaveId);
  }

  @protected
  List<AttendanceDetailRecord> sse_decode_list_attendance_detail_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttendanceDetailRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attendance_detail_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<AttendanceRecord> sse_decode_list_attendance_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <AttendanceRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_attendance_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<BiometricRecord> sse_decode_list_biometric_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BiometricRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_biometric_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<ExamScheduleRecord> sse_decode_list_exam_schedule_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ExamScheduleRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_exam_schedule_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<GradeCourseHistory> sse_decode_list_grade_course_history(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <GradeCourseHistory>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_grade_course_history(deserializer));
    }
    return ans_;
  }

  @protected
  List<LeaveRecord> sse_decode_list_leave_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <LeaveRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_leave_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<MarksRecord> sse_decode_list_marks_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MarksRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_marks_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<MarksRecordEach> sse_decode_list_marks_record_each(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <MarksRecordEach>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_marks_record_each(deserializer));
    }
    return ans_;
  }

  @protected
  List<OfficeHour> sse_decode_list_office_hour(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <OfficeHour>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_office_hour(deserializer));
    }
    return ans_;
  }

  @protected
  List<OutingRecord> sse_decode_list_outing_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <OutingRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_outing_record(deserializer));
    }
    return ans_;
  }

  @protected
  List<PaidPaymentReceipt> sse_decode_list_paid_payment_receipt(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PaidPaymentReceipt>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_paid_payment_receipt(deserializer));
    }
    return ans_;
  }

  @protected
  List<PendingPaymentReceipt> sse_decode_list_pending_payment_receipt(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PendingPaymentReceipt>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_pending_payment_receipt(deserializer));
    }
    return ans_;
  }

  @protected
  List<PerExamScheduleRecord> sse_decode_list_per_exam_schedule_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <PerExamScheduleRecord>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_per_exam_schedule_record(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<SemesterInfo> sse_decode_list_semester_info(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SemesterInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_semester_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<TimetableSlot> sse_decode_list_timetable_slot(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TimetableSlot>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_timetable_slot(deserializer));
    }
    return ans_;
  }

  @protected
  MarksRecord sse_decode_marks_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_coursecode = sse_decode_String(deserializer);
    var var_coursetitle = sse_decode_String(deserializer);
    var var_coursetype = sse_decode_String(deserializer);
    var var_faculity = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_marks = sse_decode_list_marks_record_each(deserializer);
    return MarksRecord(
        serial: var_serial,
        coursecode: var_coursecode,
        coursetitle: var_coursetitle,
        coursetype: var_coursetype,
        faculity: var_faculity,
        slot: var_slot,
        marks: var_marks);
  }

  @protected
  MarksRecordEach sse_decode_marks_record_each(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_markstitle = sse_decode_String(deserializer);
    var var_maxmarks = sse_decode_String(deserializer);
    var var_weightage = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_scoredmark = sse_decode_String(deserializer);
    var var_weightagemark = sse_decode_String(deserializer);
    var var_remark = sse_decode_String(deserializer);
    return MarksRecordEach(
        serial: var_serial,
        markstitle: var_markstitle,
        maxmarks: var_maxmarks,
        weightage: var_weightage,
        status: var_status,
        scoredmark: var_scoredmark,
        weightagemark: var_weightagemark,
        remark: var_remark);
  }

  @protected
  MentorDetails sse_decode_mentor_details(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_facultyId = sse_decode_String(deserializer);
    var var_facultyName = sse_decode_String(deserializer);
    var var_facultyDesignation = sse_decode_String(deserializer);
    var var_school = sse_decode_String(deserializer);
    var var_cabin = sse_decode_String(deserializer);
    var var_facultyDepartment = sse_decode_String(deserializer);
    var var_facultyEmail = sse_decode_String(deserializer);
    var var_facultyIntercom = sse_decode_String(deserializer);
    var var_facultyMobileNumber = sse_decode_String(deserializer);
    return MentorDetails(
        facultyId: var_facultyId,
        facultyName: var_facultyName,
        facultyDesignation: var_facultyDesignation,
        school: var_school,
        cabin: var_cabin,
        facultyDepartment: var_facultyDepartment,
        facultyEmail: var_facultyEmail,
        facultyIntercom: var_facultyIntercom,
        facultyMobileNumber: var_facultyMobileNumber);
  }

  @protected
  OfficeHour sse_decode_office_hour(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_day = sse_decode_String(deserializer);
    var var_timings = sse_decode_String(deserializer);
    return OfficeHour(day: var_day, timings: var_timings);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OutingRecord sse_decode_outing_record(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_registrationNumber = sse_decode_String(deserializer);
    var var_hostelBlock = sse_decode_String(deserializer);
    var var_roomNumber = sse_decode_String(deserializer);
    var var_placeOfVisit = sse_decode_String(deserializer);
    var var_purposeOfVisit = sse_decode_String(deserializer);
    var var_time = sse_decode_String(deserializer);
    var var_contactNumber = sse_decode_String(deserializer);
    var var_parentContactNumber = sse_decode_String(deserializer);
    var var_date = sse_decode_String(deserializer);
    var var_bookingId = sse_decode_String(deserializer);
    var var_status = sse_decode_String(deserializer);
    var var_canDownload = sse_decode_bool(deserializer);
    return OutingRecord(
        serial: var_serial,
        registrationNumber: var_registrationNumber,
        hostelBlock: var_hostelBlock,
        roomNumber: var_roomNumber,
        placeOfVisit: var_placeOfVisit,
        purposeOfVisit: var_purposeOfVisit,
        time: var_time,
        contactNumber: var_contactNumber,
        parentContactNumber: var_parentContactNumber,
        date: var_date,
        bookingId: var_bookingId,
        status: var_status,
        canDownload: var_canDownload);
  }

  @protected
  PaidPaymentReceipt sse_decode_paid_payment_receipt(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_receiptNumber = sse_decode_String(deserializer);
    var var_date = sse_decode_String(deserializer);
    var var_amount = sse_decode_String(deserializer);
    var var_campusCode = sse_decode_String(deserializer);
    var var_paymentStatus = sse_decode_String(deserializer);
    var var_receiptNo = sse_decode_String(deserializer);
    return PaidPaymentReceipt(
        receiptNumber: var_receiptNumber,
        date: var_date,
        amount: var_amount,
        campusCode: var_campusCode,
        paymentStatus: var_paymentStatus,
        receiptNo: var_receiptNo);
  }

  @protected
  PendingPaymentReceipt sse_decode_pending_payment_receipt(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_sNo = sse_decode_String(deserializer);
    var var_fprefno = sse_decode_String(deserializer);
    var var_feesHeads = sse_decode_String(deserializer);
    var var_endDate = sse_decode_String(deserializer);
    var var_amount = sse_decode_String(deserializer);
    var var_fine = sse_decode_String(deserializer);
    var var_totalAmount = sse_decode_String(deserializer);
    var var_paymentStatus = sse_decode_String(deserializer);
    return PendingPaymentReceipt(
        sNo: var_sNo,
        fprefno: var_fprefno,
        feesHeads: var_feesHeads,
        endDate: var_endDate,
        amount: var_amount,
        fine: var_fine,
        totalAmount: var_totalAmount,
        paymentStatus: var_paymentStatus);
  }

  @protected
  PerExamScheduleRecord sse_decode_per_exam_schedule_record(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_records = sse_decode_list_exam_schedule_record(deserializer);
    var var_examType = sse_decode_String(deserializer);
    return PerExamScheduleRecord(records: var_records, examType: var_examType);
  }

  @protected
  (bool, String) sse_decode_record_bool_string(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_bool(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (GradeHistory, List<GradeCourseHistory>)
      sse_decode_record_grade_history_list_grade_course_history(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_grade_history(deserializer);
    var var_field1 = sse_decode_list_grade_course_history(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  SemesterData sse_decode_semester_data(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_semesters = sse_decode_list_semester_info(deserializer);
    var var_updateTime = sse_decode_u_64(deserializer);
    return SemesterData(semesters: var_semesters, updateTime: var_updateTime);
  }

  @protected
  SemesterInfo sse_decode_semester_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return SemesterInfo(id: var_id, name: var_name);
  }

  @protected
  StudentProfile sse_decode_student_profile(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_applicationNumber = sse_decode_String(deserializer);
    var var_studentName = sse_decode_String(deserializer);
    var var_dob = sse_decode_String(deserializer);
    var var_gender = sse_decode_String(deserializer);
    var var_bloodGroup = sse_decode_String(deserializer);
    var var_email = sse_decode_String(deserializer);
    var var_base64Pfp = sse_decode_String(deserializer);
    var var_gradeHistory = sse_decode_grade_history(deserializer);
    var var_mentorDetails = sse_decode_mentor_details(deserializer);
    return StudentProfile(
        applicationNumber: var_applicationNumber,
        studentName: var_studentName,
        dob: var_dob,
        gender: var_gender,
        bloodGroup: var_bloodGroup,
        email: var_email,
        base64Pfp: var_base64Pfp,
        gradeHistory: var_gradeHistory,
        mentorDetails: var_mentorDetails);
  }

  @protected
  TimetableSlot sse_decode_timetable_slot(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_serial = sse_decode_String(deserializer);
    var var_day = sse_decode_String(deserializer);
    var var_slot = sse_decode_String(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_roomNo = sse_decode_String(deserializer);
    var var_block = sse_decode_String(deserializer);
    var var_startTime = sse_decode_String(deserializer);
    var var_endTime = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    return TimetableSlot(
        serial: var_serial,
        day: var_day,
        slot: var_slot,
        courseCode: var_courseCode,
        courseType: var_courseType,
        roomNo: var_roomNo,
        block: var_block,
        startTime: var_startTime,
        endTime: var_endTime,
        name: var_name);
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  VtopConfig sse_decode_vtop_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_baseUrl = sse_decode_String(deserializer);
    var var_timeoutSeconds = sse_decode_u_64(deserializer);
    var var_userAgent = sse_decode_String(deserializer);
    return VtopConfig(
        baseUrl: var_baseUrl,
        timeoutSeconds: var_timeoutSeconds,
        userAgent: var_userAgent);
  }

  @protected
  VtopError sse_decode_vtop_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return VtopError_NetworkError();
      case 1:
        return VtopError_VtopServerError();
      case 2:
        var var_field0 = sse_decode_String(deserializer);
        return VtopError_AuthenticationFailed(var_field0);
      case 3:
        return VtopError_RegistrationParsingError();
      case 4:
        return VtopError_InvalidCredentials();
      case 5:
        return VtopError_SessionExpired();
      case 6:
        var var_field0 = sse_decode_String(deserializer);
        return VtopError_ParseError(var_field0);
      case 7:
        var var_field0 = sse_decode_String(deserializer);
        return VtopError_ConfigurationError(var_field0);
      case 8:
        return VtopError_CaptchaRequired();
      case 9:
        return VtopError_InvalidResponse();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
          ArcJar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcJarImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          SessionManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionManagerImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          VtopClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopClientImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
          VtopClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopClientBuilderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
          VtopResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFacultyDetails(
          VtopResultFacultyDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultFacultyDetailsImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGetFaculty(
          VtopResultGetFaculty self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultGetFacultyImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGradeHistoryVecGradeCourseHistory(
          VtopResultGradeHistoryVecGradeCourseHistory self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultGradeHistoryVecGradeCourseHistoryImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelLeaveData(
          VtopResultHostelLeaveData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultHostelLeaveDataImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelOutingData(
          VtopResultHostelOutingData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultHostelOutingDataImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
          VtopResultSemesterData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultSemesterDataImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString(
          VtopResultString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultStringImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultStudentProfile(
          VtopResultStudentProfile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultStudentProfileImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceDetailRecord(
          VtopResultVecAttendanceDetailRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecAttendanceDetailRecordImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceRecord(
          VtopResultVecAttendanceRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecAttendanceRecordImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecBiometricRecord(
          VtopResultVecBiometricRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecBiometricRecordImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecMarksRecord(
          VtopResultVecMarksRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecMarksRecordImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPaidPaymentReceipt(
          VtopResultVecPaidPaymentReceipt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecPaidPaymentReceiptImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPendingPaymentReceipt(
          VtopResultVecPendingPaymentReceipt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecPendingPaymentReceiptImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPerExamScheduleRecord(
          VtopResultVecPerExamScheduleRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecPerExamScheduleRecordImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecTimetableSlot(
          VtopResultVecTimetableSlot self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecTimetableSlotImpl)
            .frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
          VtopResultVecU8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecU8Impl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          SessionManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionManagerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          VtopClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopClientImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          SessionManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionManagerImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          VtopClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopClientImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcJar(
          ArcJar self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcJarImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSessionManager(
          SessionManager self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionManagerImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClient(
          VtopClient self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopClientImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopClientBuilder(
          VtopClientBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopClientBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResult(
          VtopResult self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultFacultyDetails(
          VtopResultFacultyDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultFacultyDetailsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGetFaculty(
          VtopResultGetFaculty self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultGetFacultyImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultGradeHistoryVecGradeCourseHistory(
          VtopResultGradeHistoryVecGradeCourseHistory self,
          SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultGradeHistoryVecGradeCourseHistoryImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelLeaveData(
          VtopResultHostelLeaveData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultHostelLeaveDataImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultHostelOutingData(
          VtopResultHostelOutingData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultHostelOutingDataImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultSemesterData(
          VtopResultSemesterData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultSemesterDataImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultString(
          VtopResultString self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultStringImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultStudentProfile(
          VtopResultStudentProfile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultStudentProfileImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceDetailRecord(
          VtopResultVecAttendanceDetailRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecAttendanceDetailRecordImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecAttendanceRecord(
          VtopResultVecAttendanceRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecAttendanceRecordImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecBiometricRecord(
          VtopResultVecBiometricRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecBiometricRecordImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecMarksRecord(
          VtopResultVecMarksRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecMarksRecordImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPaidPaymentReceipt(
          VtopResultVecPaidPaymentReceipt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecPaidPaymentReceiptImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPendingPaymentReceipt(
          VtopResultVecPendingPaymentReceipt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecPendingPaymentReceiptImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecPerExamScheduleRecord(
          VtopResultVecPerExamScheduleRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecPerExamScheduleRecordImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecTimetableSlot(
          VtopResultVecTimetableSlot self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecTimetableSlotImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVtopResultVecu8(
          VtopResultVecU8 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as VtopResultVecU8Impl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_attendance_detail_record(
      AttendanceDetailRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.date, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_String(self.dayTime, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.remark, serializer);
  }

  @protected
  void sse_encode_attendance_record(
      AttendanceRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.category, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.facultyDetail, serializer);
    sse_encode_String(self.classesAttended, serializer);
    sse_encode_String(self.totalClasses, serializer);
    sse_encode_String(self.attendancePercentage, serializer);
    sse_encode_String(self.attendanceFatCat, serializer);
    sse_encode_String(self.debarStatus, serializer);
    sse_encode_String(self.courseId, serializer);
  }

  @protected
  void sse_encode_biometric_record(
      BiometricRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.date, serializer);
    sse_encode_String(self.day, serializer);
    sse_encode_String(self.inTime, serializer);
    sse_encode_String(self.outTime, serializer);
    sse_encode_String(self.duration, serializer);
    sse_encode_String(self.location, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_vtop_config(
      VtopConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_vtop_config(self, serializer);
  }

  @protected
  void sse_encode_comprehensive_data_response(
      ComprehensiveDataResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_student_profile(self.profile, serializer);
    sse_encode_list_attendance_record(self.attendance, serializer);
    sse_encode_list_timetable_slot(self.timetable, serializer);
    sse_encode_list_per_exam_schedule_record(self.examSchedule, serializer);
    sse_encode_list_grade_course_history(self.gradeCourseHistory, serializer);
    sse_encode_list_marks_record(self.marks, serializer);
  }

  @protected
  void sse_encode_exam_schedule_record(
      ExamScheduleRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.courseId, serializer);
    sse_encode_String(self.examDate, serializer);
    sse_encode_String(self.examSession, serializer);
    sse_encode_String(self.reportingTime, serializer);
    sse_encode_String(self.examTime, serializer);
    sse_encode_String(self.venue, serializer);
    sse_encode_String(self.seatLocation, serializer);
    sse_encode_String(self.seatNo, serializer);
  }

  @protected
  void sse_encode_faculty_details(
      FacultyDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.designation, serializer);
    sse_encode_String(self.department, serializer);
    sse_encode_String(self.schoolCentre, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.cabinNumber, serializer);
    sse_encode_list_office_hour(self.officeHours, serializer);
  }

  @protected
  void sse_encode_get_faculty(GetFaculty self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.facultyName, serializer);
    sse_encode_String(self.designation, serializer);
    sse_encode_String(self.schoolOrCentre, serializer);
    sse_encode_String(self.empId, serializer);
  }

  @protected
  void sse_encode_grade_course_history(
      GradeCourseHistory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseTitle, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.credits, serializer);
    sse_encode_String(self.grade, serializer);
    sse_encode_String(self.examMonth, serializer);
    sse_encode_String(self.courseDistribution, serializer);
  }

  @protected
  void sse_encode_grade_history(GradeHistory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.creditsRegistered, serializer);
    sse_encode_String(self.creditsEarned, serializer);
    sse_encode_String(self.cgpa, serializer);
  }

  @protected
  void sse_encode_hostel_leave_data(
      HostelLeaveData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_leave_record(self.records, serializer);
    sse_encode_u_64(self.updateTime, serializer);
  }

  @protected
  void sse_encode_hostel_outing_data(
      HostelOutingData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_outing_record(self.records, serializer);
    sse_encode_u_64(self.updateTime, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_leave_record(LeaveRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.registrationNumber, serializer);
    sse_encode_String(self.placeOfVisit, serializer);
    sse_encode_String(self.purposeOfVisit, serializer);
    sse_encode_String(self.fromDate, serializer);
    sse_encode_String(self.fromTime, serializer);
    sse_encode_String(self.toDate, serializer);
    sse_encode_String(self.toTime, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_bool(self.canDownload, serializer);
    sse_encode_String(self.leaveId, serializer);
  }

  @protected
  void sse_encode_list_attendance_detail_record(
      List<AttendanceDetailRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attendance_detail_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_attendance_record(
      List<AttendanceRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_attendance_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_biometric_record(
      List<BiometricRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_biometric_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_exam_schedule_record(
      List<ExamScheduleRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_exam_schedule_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_grade_course_history(
      List<GradeCourseHistory> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_grade_course_history(item, serializer);
    }
  }

  @protected
  void sse_encode_list_leave_record(
      List<LeaveRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_leave_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_marks_record(
      List<MarksRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_marks_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_marks_record_each(
      List<MarksRecordEach> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_marks_record_each(item, serializer);
    }
  }

  @protected
  void sse_encode_list_office_hour(
      List<OfficeHour> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_office_hour(item, serializer);
    }
  }

  @protected
  void sse_encode_list_outing_record(
      List<OutingRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_outing_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_paid_payment_receipt(
      List<PaidPaymentReceipt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_paid_payment_receipt(item, serializer);
    }
  }

  @protected
  void sse_encode_list_pending_payment_receipt(
      List<PendingPaymentReceipt> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_pending_payment_receipt(item, serializer);
    }
  }

  @protected
  void sse_encode_list_per_exam_schedule_record(
      List<PerExamScheduleRecord> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_per_exam_schedule_record(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_semester_info(
      List<SemesterInfo> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_semester_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_timetable_slot(
      List<TimetableSlot> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_timetable_slot(item, serializer);
    }
  }

  @protected
  void sse_encode_marks_record(MarksRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.coursecode, serializer);
    sse_encode_String(self.coursetitle, serializer);
    sse_encode_String(self.coursetype, serializer);
    sse_encode_String(self.faculity, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_list_marks_record_each(self.marks, serializer);
  }

  @protected
  void sse_encode_marks_record_each(
      MarksRecordEach self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.markstitle, serializer);
    sse_encode_String(self.maxmarks, serializer);
    sse_encode_String(self.weightage, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_String(self.scoredmark, serializer);
    sse_encode_String(self.weightagemark, serializer);
    sse_encode_String(self.remark, serializer);
  }

  @protected
  void sse_encode_mentor_details(MentorDetails self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.facultyId, serializer);
    sse_encode_String(self.facultyName, serializer);
    sse_encode_String(self.facultyDesignation, serializer);
    sse_encode_String(self.school, serializer);
    sse_encode_String(self.cabin, serializer);
    sse_encode_String(self.facultyDepartment, serializer);
    sse_encode_String(self.facultyEmail, serializer);
    sse_encode_String(self.facultyIntercom, serializer);
    sse_encode_String(self.facultyMobileNumber, serializer);
  }

  @protected
  void sse_encode_office_hour(OfficeHour self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.day, serializer);
    sse_encode_String(self.timings, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_outing_record(OutingRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.registrationNumber, serializer);
    sse_encode_String(self.hostelBlock, serializer);
    sse_encode_String(self.roomNumber, serializer);
    sse_encode_String(self.placeOfVisit, serializer);
    sse_encode_String(self.purposeOfVisit, serializer);
    sse_encode_String(self.time, serializer);
    sse_encode_String(self.contactNumber, serializer);
    sse_encode_String(self.parentContactNumber, serializer);
    sse_encode_String(self.date, serializer);
    sse_encode_String(self.bookingId, serializer);
    sse_encode_String(self.status, serializer);
    sse_encode_bool(self.canDownload, serializer);
  }

  @protected
  void sse_encode_paid_payment_receipt(
      PaidPaymentReceipt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.receiptNumber, serializer);
    sse_encode_String(self.date, serializer);
    sse_encode_String(self.amount, serializer);
    sse_encode_String(self.campusCode, serializer);
    sse_encode_String(self.paymentStatus, serializer);
    sse_encode_String(self.receiptNo, serializer);
  }

  @protected
  void sse_encode_pending_payment_receipt(
      PendingPaymentReceipt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.sNo, serializer);
    sse_encode_String(self.fprefno, serializer);
    sse_encode_String(self.feesHeads, serializer);
    sse_encode_String(self.endDate, serializer);
    sse_encode_String(self.amount, serializer);
    sse_encode_String(self.fine, serializer);
    sse_encode_String(self.totalAmount, serializer);
    sse_encode_String(self.paymentStatus, serializer);
  }

  @protected
  void sse_encode_per_exam_schedule_record(
      PerExamScheduleRecord self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_exam_schedule_record(self.records, serializer);
    sse_encode_String(self.examType, serializer);
  }

  @protected
  void sse_encode_record_bool_string(
      (bool, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_grade_history_list_grade_course_history(
      (GradeHistory, List<GradeCourseHistory>) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_grade_history(self.$1, serializer);
    sse_encode_list_grade_course_history(self.$2, serializer);
  }

  @protected
  void sse_encode_semester_data(SemesterData self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_semester_info(self.semesters, serializer);
    sse_encode_u_64(self.updateTime, serializer);
  }

  @protected
  void sse_encode_semester_info(SemesterInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_student_profile(
      StudentProfile self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.applicationNumber, serializer);
    sse_encode_String(self.studentName, serializer);
    sse_encode_String(self.dob, serializer);
    sse_encode_String(self.gender, serializer);
    sse_encode_String(self.bloodGroup, serializer);
    sse_encode_String(self.email, serializer);
    sse_encode_String(self.base64Pfp, serializer);
    sse_encode_grade_history(self.gradeHistory, serializer);
    sse_encode_mentor_details(self.mentorDetails, serializer);
  }

  @protected
  void sse_encode_timetable_slot(TimetableSlot self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.serial, serializer);
    sse_encode_String(self.day, serializer);
    sse_encode_String(self.slot, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.roomNo, serializer);
    sse_encode_String(self.block, serializer);
    sse_encode_String(self.startTime, serializer);
    sse_encode_String(self.endTime, serializer);
    sse_encode_String(self.name, serializer);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_vtop_config(VtopConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.baseUrl, serializer);
    sse_encode_u_64(self.timeoutSeconds, serializer);
    sse_encode_String(self.userAgent, serializer);
  }

  @protected
  void sse_encode_vtop_error(VtopError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case VtopError_NetworkError():
        sse_encode_i_32(0, serializer);
      case VtopError_VtopServerError():
        sse_encode_i_32(1, serializer);
      case VtopError_AuthenticationFailed(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_String(field0, serializer);
      case VtopError_RegistrationParsingError():
        sse_encode_i_32(3, serializer);
      case VtopError_InvalidCredentials():
        sse_encode_i_32(4, serializer);
      case VtopError_SessionExpired():
        sse_encode_i_32(5, serializer);
      case VtopError_ParseError(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_String(field0, serializer);
      case VtopError_ConfigurationError(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_String(field0, serializer);
      case VtopError_CaptchaRequired():
        sse_encode_i_32(8, serializer);
      case VtopError_InvalidResponse():
        sse_encode_i_32(9, serializer);
    }
  }
}

@sealed
class ArcJarImpl extends RustOpaque implements ArcJar {
  // Not to be used by end users
  ArcJarImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcJarImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcJar,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcJar,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcJarPtr,
  );
}

@sealed
class SessionManagerImpl extends RustOpaque implements SessionManager {
  // Not to be used by end users
  SessionManagerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SessionManagerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SessionManager,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SessionManager,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SessionManagerPtr,
  );

  Future<void> clear() =>
      RustLib.instance.api.crateApiVtopSessionManagerSessionManagerClear(
        that: this,
      );

  Future<ArcJar> getCookieStore() => RustLib.instance.api
          .crateApiVtopSessionManagerSessionManagerGetCookieStore(
        that: this,
      );

  Future<String?> getCsrfToken() =>
      RustLib.instance.api.crateApiVtopSessionManagerSessionManagerGetCsrfToken(
        that: this,
      );

  Future<bool> isAuthenticated() => RustLib.instance.api
          .crateApiVtopSessionManagerSessionManagerIsAuthenticated(
        that: this,
      );

  Future<void> setAuthenticated({required bool authenticated}) =>
      RustLib.instance.api
          .crateApiVtopSessionManagerSessionManagerSetAuthenticated(
              that: this, authenticated: authenticated);

  Future<void> setCsrfFromExternal({required String token}) =>
      RustLib.instance.api
          .crateApiVtopSessionManagerSessionManagerSetCsrfFromExternal(
              that: this, token: token);

  Future<void> setCsrfToken({required String token}) =>
      RustLib.instance.api.crateApiVtopSessionManagerSessionManagerSetCsrfToken(
          that: this, token: token);
}

@sealed
class VtopClientBuilderImpl extends RustOpaque implements VtopClientBuilder {
  // Not to be used by end users
  VtopClientBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopClientBuilderImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VtopClientBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopClientBuilder,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopClientBuilderPtr,
  );

  Future<VtopClient> build(
          {required String username, required String password}) =>
      RustLib.instance.api.crateApiVtopVtopConfigVtopClientBuilderBuild(
          that: this, username: username, password: password);
}

@sealed
class VtopClientImpl extends RustOpaque implements VtopClient {
  // Not to be used by end users
  VtopClientImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VtopClient,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopClient,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopClientPtr,
  );

  Future<VtopResultString> downloadPaymentReceipt(
          {required String receiptNo, required String applno}) =>
      RustLib.instance.api
          .crateApiVtopVtopClientVtopClientDownloadPaymentReceipt(
              that: this, receiptNo: receiptNo, applno: applno);

  Future<VtopResultVecAttendanceRecord> getAttendance(
          {required String semesterId}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetAttendance(
          that: this, semesterId: semesterId);

  Future<VtopResultVecAttendanceDetailRecord> getAttendanceDetail(
          {required String semesterId,
          required String courseId,
          required String courseType}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetAttendanceDetail(
          that: this,
          semesterId: semesterId,
          courseId: courseId,
          courseType: courseType);

  Future<VtopResultVecBiometricRecord> getBiometricData(
          {required String date}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetBiometricData(
          that: this, date: date);

  /// Retrieves the current session's cookies as a byte vector.
  ///
  /// Returns an error if the session is not authenticated.
  ///
  /// # Returns
  /// A vector of bytes representing the session cookies, or an error if the session has expired.
  ///
  /// # Examples
  ///
  /// ```
  /// let cookies = client.get_cookie().await?;
  /// assert!(!cookies.is_empty());
  /// ```
  Future<VtopResultVecU8> getCookie() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetCookie(
        that: this,
      );

  Future<VtopResultVecPerExamScheduleRecord> getExamSchedule(
          {required String semesterId}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetExamSchedule(
          that: this, semesterId: semesterId);

  Future<VtopResultFacultyDetails> getFacultyData({required String empId}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetFacultyData(
          that: this, empId: empId);

  Future<VtopResultGetFaculty> getFacultySearch({required String searchTerm}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetFacultySearch(
          that: this, searchTerm: searchTerm);

  /// Retrieves the student's grade history and detailed course grade records.
  ///
  /// Returns a tuple containing the overall grade history and a list of course-specific grade histories for the authenticated session.
  ///
  /// # Errors
  ///
  /// Returns `VtopError::SessionExpired` if the session is not authenticated or has expired, `VtopError::NetworkError` on network failure, or `VtopError::VtopServerError` if the server response cannot be parsed.
  ///
  /// # Examples
  ///
  /// ```
  /// let (history, course_details) = client.get_grade_history().await?;
  /// assert!(!course_details.is_empty());
  /// ```
  Future<VtopResultGradeHistoryVecGradeCourseHistory> getGradeHistory() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetGradeHistory(
        that: this,
      );

  Future<VtopResultVecU8> getHostelLeavePdf({required String leaveId}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetHostelLeavePdf(
          that: this, leaveId: leaveId);

  /// Retrieves the student's hostel leave report from the VTOP system.
  ///
  /// Returns the parsed hostel leave data if the session is authenticated. Returns a session expired error if authentication has expired or a network/server error if the request fails.
  ///
  /// # Examples
  ///
  /// ```
  /// let leave_report = client.get_hostel_leave_report().await?;
  /// println!("{:?}", leave_report);
  /// ```
  Future<VtopResultHostelLeaveData> getHostelLeaveReport() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetHostelLeaveReport(
        that: this,
      );

  Future<VtopResultVecU8> getHostelOutingPdf({required String bookingId}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetHostelOutingPdf(
          that: this, bookingId: bookingId);

  Future<VtopResultHostelOutingData> getHostelReport() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetHostelReport(
        that: this,
      );

  Future<VtopResultVecMarksRecord> getMarks({required String semesterId}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetMarks(
          that: this, semesterId: semesterId);

  /// Retrieves the list of payment receipts for the authenticated user.
  ///
  /// Returns a vector of `PaidPaymentReceipt` objects parsed from the VTOP system. If the session is expired or authentication fails, returns a `SessionExpired` error. Network or server errors are also reported as appropriate.
  ///
  /// # Returns
  /// A vector of `PaidPaymentReceipt` on success.
  ///
  /// # Errors
  /// Returns `VtopError::SessionExpired` if the session is not authenticated or has expired, `VtopError::NetworkError` on network failure, and `VtopError::VtopServerError` on server response errors.
  ///
  /// # Examples
  ///
  /// ```
  /// let receipts = client.get_payment_receipts().await?;
  /// assert!(!receipts.is_empty());
  /// ```
  Future<VtopResultVecPaidPaymentReceipt> getPaymentReceipts() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetPaymentReceipts(
        that: this,
      );

  /// Retrieves the list of pending payments for the authenticated user.
  ///
  /// Returns a vector of `PendingPaymentReceipt` records if the session is valid. If the session has expired or the network/server fails, an appropriate error is returned.
  ///
  /// # Returns
  /// A `VtopResult` containing a vector of `PendingPaymentReceipt` items on success.
  ///
  /// # Errors
  /// Returns `VtopError::SessionExpired` if the session is not authenticated or has expired, `VtopError::NetworkError` on network failure, or `VtopError::VtopServerError` if the server response cannot be parsed.
  ///
  /// # Examples
  ///
  /// ```
  /// let mut client = VtopClient::with_config(config, session, username, password);
  /// let pending = client.get_pending_payment().await?;
  /// assert!(!pending.is_empty());
  /// ```
  Future<VtopResultVecPendingPaymentReceipt> getPendingPayment() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetPendingPayment(
        that: this,
      );

  Future<VtopResultSemesterData> getSemesters() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetSemesters(
        that: this,
      );

  /// Retrieves the full student profile for the authenticated user, including grade history.
  ///
  /// Sends a POST request to the VTOP student profile endpoint using the current session's CSRF token and authorized ID,
  /// then fetches the grade history and combines them into a complete student profile. Returns the parsed student profile
  /// data with grade history on success, or a session/network error if authentication fails or the server is unreachable.
  ///
  /// # Returns
  /// The student's complete profile information as a `StudentProfile` object with grade history included.
  ///
  /// # Errors
  /// Returns `VtopError::SessionExpired` if the session is not authenticated or has expired, or `VtopError::NetworkError`/`VtopError::VtopServerError` on network or server failure.
  ///
  /// # Examples
  ///
  /// ```
  /// let profile = client.get_student_profile().await?;
  /// println!("Student name: {}", profile.student_name);
  /// println!("CGPA: {}", profile.grade_history.cgpa);
  /// ```
  Future<VtopResultStudentProfile> getStudentProfile() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetStudentProfile(
        that: this,
      );

  Future<VtopResultVecTimetableSlot> getTimetable(
          {required String semesterId}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientGetTimetable(
          that: this, semesterId: semesterId);

  Future<bool> isAuthenticated() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientIsAuthenticated(
        that: this,
      );

  Future<VtopResult> login() =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientLogin(
        that: this,
      );

  Future<VtopResultString> submitOutingForm(
          {required String purposeOfVisit,
          required String outingDate,
          required String contactNumber,
          required String outPlace,
          required String outTime}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientSubmitOutingForm(
          that: this,
          purposeOfVisit: purposeOfVisit,
          outingDate: outingDate,
          contactNumber: contactNumber,
          outPlace: outPlace,
          outTime: outTime);
}

@sealed
class VtopResultFacultyDetailsImpl extends RustOpaque
    implements VtopResultFacultyDetails {
  // Not to be used by end users
  VtopResultFacultyDetailsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultFacultyDetailsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_VtopResultFacultyDetails,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopResultFacultyDetails,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultFacultyDetailsPtr,
  );
}

@sealed
class VtopResultGetFacultyImpl extends RustOpaque
    implements VtopResultGetFaculty {
  // Not to be used by end users
  VtopResultGetFacultyImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultGetFacultyImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_VtopResultGetFaculty,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopResultGetFaculty,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopResultGetFacultyPtr,
  );
}

@sealed
class VtopResultGradeHistoryVecGradeCourseHistoryImpl extends RustOpaque
    implements VtopResultGradeHistoryVecGradeCourseHistory {
  // Not to be used by end users
  VtopResultGradeHistoryVecGradeCourseHistoryImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultGradeHistoryVecGradeCourseHistoryImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_VtopResultGradeHistoryVecGradeCourseHistory,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultGradeHistoryVecGradeCourseHistory,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultGradeHistoryVecGradeCourseHistoryPtr,
  );
}

@sealed
class VtopResultHostelLeaveDataImpl extends RustOpaque
    implements VtopResultHostelLeaveData {
  // Not to be used by end users
  VtopResultHostelLeaveDataImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultHostelLeaveDataImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_VtopResultHostelLeaveData,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopResultHostelLeaveData,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultHostelLeaveDataPtr,
  );
}

@sealed
class VtopResultHostelOutingDataImpl extends RustOpaque
    implements VtopResultHostelOutingData {
  // Not to be used by end users
  VtopResultHostelOutingDataImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultHostelOutingDataImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_VtopResultHostelOutingData,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultHostelOutingData,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultHostelOutingDataPtr,
  );
}

@sealed
class VtopResultImpl extends RustOpaque implements VtopResult {
  // Not to be used by end users
  VtopResultImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VtopResult,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopResult,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopResultPtr,
  );
}

@sealed
class VtopResultSemesterDataImpl extends RustOpaque
    implements VtopResultSemesterData {
  // Not to be used by end users
  VtopResultSemesterDataImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultSemesterDataImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_VtopResultSemesterData,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopResultSemesterData,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopResultSemesterDataPtr,
  );
}

@sealed
class VtopResultStringImpl extends RustOpaque implements VtopResultString {
  // Not to be used by end users
  VtopResultStringImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultStringImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VtopResultString,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopResultString,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopResultStringPtr,
  );
}

@sealed
class VtopResultStudentProfileImpl extends RustOpaque
    implements VtopResultStudentProfile {
  // Not to be used by end users
  VtopResultStudentProfileImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultStudentProfileImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_VtopResultStudentProfile,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopResultStudentProfile,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultStudentProfilePtr,
  );
}

@sealed
class VtopResultVecAttendanceDetailRecordImpl extends RustOpaque
    implements VtopResultVecAttendanceDetailRecord {
  // Not to be used by end users
  VtopResultVecAttendanceDetailRecordImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecAttendanceDetailRecordImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_VtopResultVecAttendanceDetailRecord,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecAttendanceDetailRecord,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecAttendanceDetailRecordPtr,
  );
}

@sealed
class VtopResultVecAttendanceRecordImpl extends RustOpaque
    implements VtopResultVecAttendanceRecord {
  // Not to be used by end users
  VtopResultVecAttendanceRecordImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecAttendanceRecordImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_VtopResultVecAttendanceRecord,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecAttendanceRecord,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecAttendanceRecordPtr,
  );
}

@sealed
class VtopResultVecBiometricRecordImpl extends RustOpaque
    implements VtopResultVecBiometricRecord {
  // Not to be used by end users
  VtopResultVecBiometricRecordImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecBiometricRecordImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_VtopResultVecBiometricRecord,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecBiometricRecord,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecBiometricRecordPtr,
  );
}

@sealed
class VtopResultVecMarksRecordImpl extends RustOpaque
    implements VtopResultVecMarksRecord {
  // Not to be used by end users
  VtopResultVecMarksRecordImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecMarksRecordImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_VtopResultVecMarksRecord,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_VtopResultVecMarksRecord,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecMarksRecordPtr,
  );
}

@sealed
class VtopResultVecPaidPaymentReceiptImpl extends RustOpaque
    implements VtopResultVecPaidPaymentReceipt {
  // Not to be used by end users
  VtopResultVecPaidPaymentReceiptImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecPaidPaymentReceiptImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_VtopResultVecPaidPaymentReceipt,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecPaidPaymentReceipt,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecPaidPaymentReceiptPtr,
  );
}

@sealed
class VtopResultVecPendingPaymentReceiptImpl extends RustOpaque
    implements VtopResultVecPendingPaymentReceipt {
  // Not to be used by end users
  VtopResultVecPendingPaymentReceiptImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecPendingPaymentReceiptImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_VtopResultVecPendingPaymentReceipt,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecPendingPaymentReceipt,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecPendingPaymentReceiptPtr,
  );
}

@sealed
class VtopResultVecPerExamScheduleRecordImpl extends RustOpaque
    implements VtopResultVecPerExamScheduleRecord {
  // Not to be used by end users
  VtopResultVecPerExamScheduleRecordImpl.frbInternalDcoDecode(
      List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecPerExamScheduleRecordImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_VtopResultVecPerExamScheduleRecord,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecPerExamScheduleRecord,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecPerExamScheduleRecordPtr,
  );
}

@sealed
class VtopResultVecTimetableSlotImpl extends RustOpaque
    implements VtopResultVecTimetableSlot {
  // Not to be used by end users
  VtopResultVecTimetableSlotImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecTimetableSlotImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_VtopResultVecTimetableSlot,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecTimetableSlot,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_VtopResultVecTimetableSlotPtr,
  );
}

@sealed
class VtopResultVecU8Impl extends RustOpaque implements VtopResultVecU8 {
  // Not to be used by end users
  VtopResultVecU8Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VtopResultVecU8Impl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VtopResultVecU8,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopResultVecU8,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VtopResultVecU8Ptr,
  );
}
