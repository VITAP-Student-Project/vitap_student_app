// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Response>>
abstract class Response implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SessionManager>>
abstract class SessionManager implements RustOpaqueInterface {
  /// Checks if a response indicates session expiration and handles it.
  ///
  /// # Arguments
  /// * `response` - The HTTP response to check
  ///
  /// # Returns
  /// Returns `Ok(())` if session is still valid, or `Err(VtopError::SessionExpired)` if expired
  Future<VtopResult> checkSessionExpiration({required Response response});

  Future<void> clear();

  Future<ArcJar> getCookieStore();

  Future<String?> getCsrfToken();

  Future<bool> isAuthenticated();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<SessionManager> newInstance() =>
      RustLib.instance.api.crateApiVtopSessionManagerSessionManagerNew();

  Future<void> setAuthenticated({required bool authenticated});

  Future<void> setCsrfFromExternal({required String token});

  Future<void> setCsrfToken({required String token});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < () >>>
abstract class VtopResult implements RustOpaqueInterface {}
