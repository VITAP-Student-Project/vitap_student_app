// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'session_manager.dart';
import 'vtop_config.dart';

// These functions are ignored because they are not marked as `pub`: `extract_captcha_data`, `extract_csrf_token`, `get_login_page_error`, `get_regno`, `load_initial_page`, `load_login_page`, `make_client`, `perform_login`, `solve_captcha`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopClient>>
abstract class VtopClient implements RustOpaqueInterface {
  Future<VtopResultString> downloadPaymentReceipt(
      {required String receiptNo, required String applno});

  Future<VtopResultVecAttendanceRecord> getAttendance(
      {required String semesterId});

  Future<VtopResultVecAttendanceDetailRecord> getAttendanceDetail(
      {required String semesterId,
      required String courseId,
      required String courseType});

  Future<VtopResultVecBiometricRecord> getBiometricData({required String date});

  /// Retrieves the current session's cookies as a byte vector.
  ///
  /// Returns an error if the session is not authenticated.
  ///
  /// # Returns
  /// A vector of bytes representing the session cookies, or an error if the session has expired.
  ///
  /// # Examples
  ///
  /// ```
  /// let cookies = client.get_cookie().await?;
  /// assert!(!cookies.is_empty());
  /// ```
  Future<VtopResultVecU8> getCookie();

  Future<VtopResultVecPerExamScheduleRecord> getExamSchedule(
      {required String semesterId});

  Future<VtopResultFacultyDetails> getFacultyData({required String empId});

  Future<VtopResultGetFaculty> getFacultySearch({required String searchTerm});

  /// Retrieves the student's grade history and detailed course grade records.
  ///
  /// Returns a `GradeHistory` struct containing the overall grade history and course-specific grade histories for the authenticated session.
  ///
  /// # Errors
  ///
  /// Returns `VtopError::SessionExpired` if the session is not authenticated or has expired, `VtopError::NetworkError` on network failure, or `VtopError::VtopServerError` if the server response cannot be parsed.
  ///
  /// # Examples
  ///
  /// ```
  /// let grade_history = client.get_grade_history().await?;
  /// assert!(!grade_history.courses.is_empty());
  /// ```
  Future<VtopResultGradeHistory> getGradeHistory();

  Future<VtopResultVecU8> getHostelLeavePdf({required String leaveId});

  /// Retrieves the student's hostel leave report from the VTOP system.
  ///
  /// Returns the parsed hostel leave data if the session is authenticated. Returns a session expired error if authentication has expired or a network/server error if the request fails.
  ///
  /// # Examples
  ///
  /// ```
  /// let leave_report = client.get_hostel_leave_report().await?;
  /// println!("{:?}", leave_report);
  /// ```
  Future<VtopResultHostelLeaveData> getHostelLeaveReport();

  Future<VtopResultVecU8> getHostelOutingPdf({required String bookingId});

  Future<VtopResultHostelOutingData> getHostelReport();

  Future<VtopResultVecMarks> getMarks({required String semesterId});

  /// Retrieves the list of payment receipts for the authenticated user.
  ///
  /// Returns a vector of `PaidPaymentReceipt` objects parsed from the VTOP system. If the session is expired or authentication fails, returns a `SessionExpired` error. Network or server errors are also reported as appropriate.
  ///
  /// # Returns
  /// A vector of `PaidPaymentReceipt` on success.
  ///
  /// # Errors
  /// Returns `VtopError::SessionExpired` if the session is not authenticated or has expired, `VtopError::NetworkError` on network failure, and `VtopError::VtopServerError` on server response errors.
  ///
  /// # Examples
  ///
  /// ```
  /// let receipts = client.get_payment_receipts().await?;
  /// assert!(!receipts.is_empty());
  /// ```
  Future<VtopResultVecPaidPaymentReceipt> getPaymentReceipts();

  /// Retrieves the list of pending payments for the authenticated user.
  ///
  /// Returns a vector of `PendingPaymentReceipt` records if the session is valid. If the session has expired or the network/server fails, an appropriate error is returned.
  ///
  /// # Returns
  /// A `VtopResult` containing a vector of `PendingPaymentReceipt` items on success.
  ///
  /// # Errors
  /// Returns `VtopError::SessionExpired` if the session is not authenticated or has expired, `VtopError::NetworkError` on network failure, or `VtopError::VtopServerError` if the server response cannot be parsed.
  ///
  /// # Examples
  ///
  /// ```
  /// let mut client = VtopClient::with_config(config, session, username, password);
  /// let pending = client.get_pending_payment().await?;
  /// assert!(!pending.is_empty());
  /// ```
  Future<VtopResultVecPendingPaymentReceipt> getPendingPayment();

  Future<VtopResultSemesterData> getSemesters();

  /// Retrieves the full student profile for the authenticated user, including grade history.
  ///
  /// Sends a POST request to the VTOP student profile endpoint using the current session's CSRF token and authorized ID,
  /// then fetches the grade history and combines them into a complete student profile. Returns the parsed student profile
  /// data with grade history on success, or a session/network error if authentication fails or the server is unreachable.
  ///
  /// # Returns
  /// The student's complete profile information as a `StudentProfile` object with grade history included.
  ///
  /// # Errors
  /// Returns `VtopError::SessionExpired` if the session is not authenticated or has expired, or `VtopError::NetworkError`/`VtopError::VtopServerError` on network or server failure.
  ///
  /// # Examples
  ///
  /// ```
  /// let profile = client.get_student_profile().await?;
  /// println!("Student name: {}", profile.student_name);
  /// println!("CGPA: {}", profile.grade_history.cgpa);
  /// ```
  Future<VtopResultStudentProfile> getStudentProfile();

  Future<VtopResultTimetable> getTimetable({required String semesterId});

  Future<bool> isAuthenticated();

  Future<VtopResult> login();

  Future<VtopResultString> submitOutingForm(
      {required String purposeOfVisit,
      required String outingDate,
      required String contactNumber,
      required String outPlace,
      required String outTime});

  static Future<VtopClient> withConfig(
          {required VtopConfig config,
          required SessionManager session,
          required String username,
          required String password}) =>
      RustLib.instance.api.crateApiVtopVtopClientVtopClientWithConfig(
          config: config,
          session: session,
          username: username,
          password: password);
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < () >>>
abstract class VtopResult implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < FacultyDetails >>>
abstract class VtopResultFacultyDetails implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < GetFaculty >>>
abstract class VtopResultGetFaculty implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < GradeHistory >>>
abstract class VtopResultGradeHistory implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < HostelLeaveData >>>
abstract class VtopResultHostelLeaveData implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < HostelOutingData >>>
abstract class VtopResultHostelOutingData implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < SemesterData >>>
abstract class VtopResultSemesterData implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < String >>>
abstract class VtopResultString implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < StudentProfile >>>
abstract class VtopResultStudentProfile implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < Timetable >>>
abstract class VtopResultTimetable implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < Vec < AttendanceDetailRecord > >>>
abstract class VtopResultVecAttendanceDetailRecord
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < Vec < AttendanceRecord > >>>
abstract class VtopResultVecAttendanceRecord implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < Vec < BiometricRecord > >>>
abstract class VtopResultVecBiometricRecord implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < Vec < Marks > >>>
abstract class VtopResultVecMarks implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < Vec < PaidPaymentReceipt > >>>
abstract class VtopResultVecPaidPaymentReceipt implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < Vec < PendingPaymentReceipt > >>>
abstract class VtopResultVecPendingPaymentReceipt
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < Vec < PerExamScheduleRecord > >>>
abstract class VtopResultVecPerExamScheduleRecord
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VtopResult < Vec < u8 > >>>
abstract class VtopResultVecU8 implements RustOpaqueInterface {}
