// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:meta/meta.dart' as meta;
import 'vtop/types/attendance.dart';
import 'vtop/types/biometric.dart';
import 'vtop/types/faculty.dart';
import 'vtop/types/grade_course_history.dart';
import 'vtop/types/grade_history.dart';
import 'vtop/types/hostel.dart';
import 'vtop/types/mentor_details.dart';
import 'vtop/types/semester.dart';
import 'vtop/types/student_profile.dart';
import 'vtop/vtop_client.dart';
import 'vtop/vtop_errors.dart';

VtopClient getVtopClient(
        {required String username, required String password}) =>
    RustLib.instance.api.crateApiVtopGetClientGetVtopClient(
        username: username, password: password);

Future<void> vtopClientLogin({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientVtopClientLogin(client: client);

Future<SemesterData> fetchSemesters({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchSemesters(client: client);

/// Fetches comprehensive student data including profile, attendance, timetable,
/// exam schedule, grade history, and marks for a specific semester.
///
/// This function consolidates multiple API calls into a single request, providing
/// all essential student data in one response structure.
///
/// # Returns
/// A serialized JSON string containing all student data on success, or a `VtopError` on failure.
Future<String> fetchAllData(
        {required VtopClient client, required String semesterId}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchAllData(
        client: client, semesterId: semesterId);

Future<String> fetchAttendance(
        {required VtopClient client, required String semesterId}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchAttendance(
        client: client, semesterId: semesterId);

Future<List<AttendanceDetailRecord>> fetchAttendanceDetail(
        {required VtopClient client,
        required String semesterId,
        required String courseId,
        required String courseType}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchAttendanceDetail(
        client: client,
        semesterId: semesterId,
        courseId: courseId,
        courseType: courseType);

Future<String> fetchTimetable(
        {required VtopClient client, required String semesterId}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchTimetable(
        client: client, semesterId: semesterId);

Future<String> fetchMarks(
        {required VtopClient client, required String semesterId}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchMarks(
        client: client, semesterId: semesterId);

Future<String> fetchExamShedule(
        {required VtopClient client, required String semesterId}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchExamShedule(
        client: client, semesterId: semesterId);

Future<Uint8List> fetchCookies({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchCookies(client: client);

Future<bool> fetchIsAuth({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchIsAuth(client: client);

Future<(bool, String)> fetchWifi(
        {required String username, required String password, required int i}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchWifi(
        username: username, password: password, i: i);

Future<List<BiometricRecord>> fetchBiometricData(
        {required VtopClient client, required String date}) =>
    RustLib.instance.api
        .crateApiVtopGetClientFetchBiometricData(client: client, date: date);

Future<GetFaculty> fetchFacultySearch(
        {required VtopClient client, required String searchTerm}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchFacultySearch(
        client: client, searchTerm: searchTerm);

Future<FacultyDetails> fetchFacultyData(
        {required VtopClient client, required String empId}) =>
    RustLib.instance.api
        .crateApiVtopGetClientFetchFacultyData(client: client, empId: empId);

Future<HostelOutingData> fetchHostelReport({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchHostelReport(client: client);

Future<Uint8List> fetchHostelOuting(
        {required VtopClient client, required String bookingId}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchHostelOuting(
        client: client, bookingId: bookingId);

Future<String> submitHostelOutingForm(
        {required VtopClient client,
        required String purposeOfVisit,
        required String outingDate,
        required String contactNumber,
        required String outPlace,
        required String outTime}) =>
    RustLib.instance.api.crateApiVtopGetClientSubmitHostelOutingForm(
        client: client,
        purposeOfVisit: purposeOfVisit,
        outingDate: outingDate,
        contactNumber: contactNumber,
        outPlace: outPlace,
        outTime: outTime);

Future<HostelLeaveData> leaveReport({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientLeaveReport(client: client);

/// Downloads the PDF report for a specific hostel leave request.
///
/// Returns the PDF file as a byte vector if successful, or a `VtopError` on failure.
///
/// # Examples
///
/// ```
/// let pdf_bytes = leave_report_download(&mut client, "LEAVE123".to_string()).await?;
/// assert!(!pdf_bytes.is_empty());
/// ```
Future<Uint8List> leaveReportDownload(
        {required VtopClient client, required String leaveId}) =>
    RustLib.instance.api.crateApiVtopGetClientLeaveReportDownload(
        client: client, leaveId: leaveId);

/// Retrieves the complete student profile for the authenticated user.
///
/// Returns a `StudentProfile` containing detailed profile information on success, or a `VtopError` if the operation fails.
///
/// # Examples
///
/// ```
/// let mut client = get_vtop_client("username".to_string(), "password".to_string());
/// let profile = student_profile(&mut client).await.unwrap();
/// assert_eq!(profile.name, "John Doe");
/// ```
Future<StudentProfile> fetchStudentProfile({required VtopClient client}) =>
    RustLib.instance.api
        .crateApiVtopGetClientFetchStudentProfile(client: client);

/// Retrieves the student's overall grade history and detailed course-wise grade records.
///
/// Returns a `GradeHistory` struct containing the student's grade history summary and course grade histories.
///
/// # Examples
///
/// ```
/// let grade_history = fetch_grade_history(&mut client).await.unwrap();
/// assert!(!grade_history.courses.is_empty());
/// ```
Future<GradeHistory> fetchGradeHistory({required VtopClient client}) =>
    RustLib.instance.api.crateApiVtopGetClientFetchGradeHistory(client: client);

/// Retrieves a list of pending payments for the student.
///
/// Returns a vector of `PendingPaymentReceipt` records on success, or a `VtopError` if the operation fails.
///
/// # Examples
///
/// ```
/// let payments = student_pending_payments(&mut client).await?;
/// assert!(!payments.is_empty() || payments.is_empty());
/// ```
Future<String> fetchPendingPayments({required VtopClient client}) =>
    RustLib.instance.api
        .crateApiVtopGetClientFetchPendingPayments(client: client);

Future<String> fetchPaymentReceipts({required VtopClient client}) =>
    RustLib.instance.api
        .crateApiVtopGetClientFetchPaymentReceipts(client: client);

/// Downloads a specific payment receipt as a PDF file.
Future<String> studentPaymentReceiptDownload(
        {required VtopClient client,
        required String receiptNo,
        required String applno}) =>
    RustLib.instance.api.crateApiVtopGetClientStudentPaymentReceiptDownload(
        client: client, receiptNo: receiptNo, applno: applno);
