// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/attendance.dart';
import 'core/models/exam_schedule.dart';
import 'core/models/grade_history.dart';
import 'core/models/mark.dart';
import 'core/models/mentor_details.dart';
import 'core/models/profile.dart';
import 'core/models/timetable.dart';
import 'core/models/user.dart';
import 'core/models/user_preferences.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5148627127929716479),
    name: 'Attendance',
    lastPropertyId: const obx_int.IdUid(18, 5381065677569440348),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4490524558857299380),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3898853814942850309),
        name: 'courseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 848852866961849409),
        name: 'courseCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4034035214175183947),
        name: 'courseName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2804244350096925533),
        name: 'courseType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2624775593989631584),
        name: 'courseSlot',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 365397794081602162),
        name: 'attendedClasses',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6547092396075910173),
        name: 'totalClasses',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4245248714495127285),
        name: 'attendancePercentage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 6821044859330773231),
        name: 'debarStatus',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 5919515583250768545),
        name: 'classNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 7076237717142476967),
        name: 'faculty',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 5381065677569440348),
        name: 'betweenAttendancePercentage',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 664014106008085534),
    name: 'Day',
    lastPropertyId: const obx_int.IdUid(10, 1669290927385264664),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5919923893566261623),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3786184648495042822),
        name: 'courseName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 136208151839959472),
        name: 'slot',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5028531770128514889),
        name: 'venue',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 238078324998243647),
        name: 'faculty',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3280709886644277837),
        name: 'courseCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8068185048891131976),
        name: 'courseType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5466636850432496378),
        name: 'startTime',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 1669290927385264664),
        name: 'endTime',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 2306055071733064225),
    name: 'Detail',
    lastPropertyId: const obx_int.IdUid(9, 2628134531734008953),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1010558584090017427),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3947133468702346097),
        name: 'serialNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 513251553370975857),
        name: 'markTitle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3558087432488852719),
        name: 'maxMark',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2115976997295838400),
        name: 'weightage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5264211196768363281),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 4536883372930183917),
        name: 'scoredMark',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8106872705836700364),
        name: 'weightageMark',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2628134531734008953),
        name: 'remark',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 5376953268574814093),
    name: 'ExamSchedule',
    lastPropertyId: const obx_int.IdUid(2, 3383828512282727895),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2153737138281805673),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3383828512282727895),
        name: 'examType',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 6230742604872638968),
        name: 'subjects',
        targetId: const obx_int.IdUid(9, 3681063097322799873),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 6793300187353613793),
    name: 'GradeHistory',
    lastPropertyId: const obx_int.IdUid(4, 6860296908220997158),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7501454029148757388),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7885893163395984662),
        name: 'creditsRegistered',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7369451703082874990),
        name: 'creditsEarned',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6860296908220997158),
        name: 'cgpa',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(13, 8949173924576356692),
        name: 'courses',
        targetId: const obx_int.IdUid(13, 3135862705827798264),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 4580211671254627378),
    name: 'Mark',
    lastPropertyId: const obx_int.IdUid(9, 42050835680603257),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 800112108807702818),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1127698021251919027),
        name: 'serialNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5019531693189815072),
        name: 'courseCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 8269192089369372792),
        name: 'courseTitle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4959121938365497571),
        name: 'courseType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6051412623183911696),
        name: 'faculty',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 42050835680603257),
        name: 'slot',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 3905764868292420530),
        name: 'details',
        targetId: const obx_int.IdUid(3, 2306055071733064225),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 8454938987186961497),
    name: 'MentorDetails',
    lastPropertyId: const obx_int.IdUid(10, 6693334861229386065),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7776257631847890336),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1291077633819444302),
        name: 'facultyId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3583334798010805226),
        name: 'facultyName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8714911410383069048),
        name: 'facultyDesignation',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7210680926850087654),
        name: 'school',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2886189259481240186),
        name: 'cabin',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2691598989342316514),
        name: 'facultyDepartment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 6076399695747985779),
        name: 'facultyEmail',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8482410627240088247),
        name: 'facultyIntercom',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 6693334861229386065),
        name: 'facultyMobileNumber',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 1896303349271616152),
    name: 'Profile',
    lastPropertyId: const obx_int.IdUid(10, 4754865138752617991),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6212431263846557542),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7906743130361477479),
        name: 'applicationNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2325563310546981059),
        name: 'studentName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8909936713934690028),
        name: 'dob',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3407145581694335854),
        name: 'gender',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3339649666311868514),
        name: 'bloodGroup',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7249482175815414330),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 544963273394530553),
        name: 'base64Pfp',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6972834726399693696),
        name: 'gradeHistoryId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 3607650600336995947),
        relationTarget: 'GradeHistory',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4754865138752617991),
        name: 'mentorDetailsId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 7223130016198089744),
        relationTarget: 'MentorDetails',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 3681063097322799873),
    name: 'Subject',
    lastPropertyId: const obx_int.IdUid(15, 6468588741686320167),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2003343462721254844),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5907890164065241399),
        name: 'serialNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 33103319253382162),
        name: 'courseCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8372387351746304472),
        name: 'courseTitle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7604799054553258245),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 3536602016817228530),
        name: 'slot',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 4895371708629892889),
        name: 'date',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 6071299304685702766),
        name: 'session',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5421460293445711352),
        name: 'reportingTime',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 5854513883968056007),
        name: 'examTime',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 1168925727089381712),
        name: 'venue',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 701969392686931784),
        name: 'seatLocation',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 6324373642419589306),
        name: 'seatNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 6468588741686320167),
        name: 'courseId',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 392021300921625254),
    name: 'Timetable',
    lastPropertyId: const obx_int.IdUid(1, 5020517029224883090),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5020517029224883090),
        name: 'id',
        type: 6,
        flags: 1,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 1904553498132888236),
        name: 'monday',
        targetId: const obx_int.IdUid(2, 664014106008085534),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(4, 7963796260772932833),
        name: 'tuesday',
        targetId: const obx_int.IdUid(2, 664014106008085534),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(5, 3476589110095534292),
        name: 'wednesday',
        targetId: const obx_int.IdUid(2, 664014106008085534),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(6, 630188303050166388),
        name: 'thursday',
        targetId: const obx_int.IdUid(2, 664014106008085534),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(7, 1659911403907945709),
        name: 'friday',
        targetId: const obx_int.IdUid(2, 664014106008085534),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(8, 1861848154196761881),
        name: 'saturday',
        targetId: const obx_int.IdUid(2, 664014106008085534),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(9, 7904407372427362769),
        name: 'sunday',
        targetId: const obx_int.IdUid(2, 664014106008085534),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(11, 829166403616344907),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(4, 3949331561146989652),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3379672373844087096),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2281593678702740458),
        name: 'profileId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 279302480209152252),
        relationTarget: 'Profile',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6573713484312973042),
        name: 'timetableId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 6374108486558791078),
        relationTarget: 'Timetable',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(10, 7928925940834186735),
        name: 'attendance',
        targetId: const obx_int.IdUid(1, 5148627127929716479),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(11, 3664402533420636342),
        name: 'examSchedule',
        targetId: const obx_int.IdUid(4, 5376953268574814093),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(12, 7548434984199434174),
        name: 'marks',
        targetId: const obx_int.IdUid(6, 4580211671254627378),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(12, 8803805611900482677),
    name: 'UserPreferences',
    lastPropertyId: const obx_int.IdUid(13, 3503152639801902990),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5840870617410416390),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4870591697686343627),
        name: 'pfpPath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8810971638332469399),
        name: 'isTimetableNotificationsEnabled',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 924108293691204565),
        name: 'isExamScheduleNotificationEnabled',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6686611020021777849),
        name: 'timetableNotificationDelay',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1716553866764121612),
        name: 'examScheduleNotificationDelay',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5400988348890105303),
        name: 'isPrivacyEnabled',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1522175198613094854),
        name: 'isDarkModeEnabled',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7468009750703128940),
        name: 'lastSync',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 1568920808449732706),
        name: 'attendanceLastSync',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8884881751287806821),
        name: 'marksLastSync',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 6798577181071535608),
        name: 'examScheduleLastSync',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 3503152639801902990),
        name: 'isFirstLaunch',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(13, 3135862705827798264),
    name: 'Course',
    lastPropertyId: const obx_int.IdUid(8, 5161629663763594975),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7567983839891409960),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8341901771577026341),
        name: 'courseCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3451996923024167938),
        name: 'courseTitle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6854070524648137084),
        name: 'courseType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3989243662671965672),
        name: 'credits',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6125664313457747432),
        name: 'grade',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 948868918471051990),
        name: 'examMonth',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5161629663763594975),
        name: 'courseDistribution',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(13, 3135862705827798264),
    lastIndexId: const obx_int.IdUid(5, 1353318665125941759),
    lastRelationId: const obx_int.IdUid(13, 8949173924576356692),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [1353318665125941759],
    retiredPropertyUids: const [
      4447360877894212913,
      3896411782429207464,
      5463215188413268011,
      2680334277638963406,
      5793236853915877454,
      1266342408185953536,
      3949331561146989652,
      4549602527033181311,
      5953351526892332308,
      8130406564169076586,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Attendance: obx_int.EntityDefinition<Attendance>(
      model: _entities[0],
      toOneRelations: (Attendance object) => [],
      toManyRelations: (Attendance object) => {},
      getId: (Attendance object) => object.id,
      setId: (Attendance object, int id) {
        object.id = id;
      },
      objectToFB: (Attendance object, fb.Builder fbb) {
        final courseIdOffset = fbb.writeString(object.courseId);
        final courseCodeOffset = fbb.writeString(object.courseCode);
        final courseNameOffset = fbb.writeString(object.courseName);
        final courseTypeOffset = fbb.writeString(object.courseType);
        final courseSlotOffset = fbb.writeString(object.courseSlot);
        final attendedClassesOffset = fbb.writeString(object.attendedClasses);
        final totalClassesOffset = fbb.writeString(object.totalClasses);
        final attendancePercentageOffset = fbb.writeString(
          object.attendancePercentage,
        );
        final debarStatusOffset = fbb.writeString(object.debarStatus);
        final classNumberOffset = fbb.writeString(object.classNumber);
        final facultyOffset = fbb.writeString(object.faculty);
        final betweenAttendancePercentageOffset = fbb.writeString(
          object.betweenAttendancePercentage,
        );
        fbb.startTable(19);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, courseIdOffset);
        fbb.addOffset(2, courseCodeOffset);
        fbb.addOffset(3, courseNameOffset);
        fbb.addOffset(4, courseTypeOffset);
        fbb.addOffset(5, courseSlotOffset);
        fbb.addOffset(6, attendedClassesOffset);
        fbb.addOffset(7, totalClassesOffset);
        fbb.addOffset(8, attendancePercentageOffset);
        fbb.addOffset(10, debarStatusOffset);
        fbb.addOffset(15, classNumberOffset);
        fbb.addOffset(16, facultyOffset);
        fbb.addOffset(17, betweenAttendancePercentageOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final classNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 34, '');
        final facultyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 36, '');
        final courseIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final courseCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final courseNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final courseTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final courseSlotParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final attendedClassesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final totalClassesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final attendancePercentageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final betweenAttendancePercentageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 38, '');
        final debarStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final object = Attendance(
          classNumber: classNumberParam,
          faculty: facultyParam,
          courseId: courseIdParam,
          courseCode: courseCodeParam,
          courseName: courseNameParam,
          courseType: courseTypeParam,
          courseSlot: courseSlotParam,
          attendedClasses: attendedClassesParam,
          totalClasses: totalClassesParam,
          attendancePercentage: attendancePercentageParam,
          betweenAttendancePercentage: betweenAttendancePercentageParam,
          debarStatus: debarStatusParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    Day: obx_int.EntityDefinition<Day>(
      model: _entities[1],
      toOneRelations: (Day object) => [],
      toManyRelations: (Day object) => {},
      getId: (Day object) => object.id,
      setId: (Day object, int id) {
        object.id = id;
      },
      objectToFB: (Day object, fb.Builder fbb) {
        final courseNameOffset = object.courseName == null
            ? null
            : fbb.writeString(object.courseName!);
        final slotOffset =
            object.slot == null ? null : fbb.writeString(object.slot!);
        final venueOffset =
            object.venue == null ? null : fbb.writeString(object.venue!);
        final facultyOffset =
            object.faculty == null ? null : fbb.writeString(object.faculty!);
        final courseCodeOffset = object.courseCode == null
            ? null
            : fbb.writeString(object.courseCode!);
        final courseTypeOffset = object.courseType == null
            ? null
            : fbb.writeString(object.courseType!);
        final startTimeOffset = object.startTime == null
            ? null
            : fbb.writeString(object.startTime!);
        final endTimeOffset =
            object.endTime == null ? null : fbb.writeString(object.endTime!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(2, courseNameOffset);
        fbb.addOffset(3, slotOffset);
        fbb.addOffset(4, venueOffset);
        fbb.addOffset(5, facultyOffset);
        fbb.addOffset(6, courseCodeOffset);
        fbb.addOffset(7, courseTypeOffset);
        fbb.addOffset(8, startTimeOffset);
        fbb.addOffset(9, endTimeOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final startTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final endTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final courseNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final slotParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final venueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final facultyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final courseCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final courseTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final object = Day(
          startTime: startTimeParam,
          endTime: endTimeParam,
          courseName: courseNameParam,
          slot: slotParam,
          venue: venueParam,
          faculty: facultyParam,
          courseCode: courseCodeParam,
          courseType: courseTypeParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    Detail: obx_int.EntityDefinition<Detail>(
      model: _entities[2],
      toOneRelations: (Detail object) => [],
      toManyRelations: (Detail object) => {},
      getId: (Detail object) => object.id,
      setId: (Detail object, int id) {
        object.id = id;
      },
      objectToFB: (Detail object, fb.Builder fbb) {
        final serialNumberOffset = fbb.writeString(object.serialNumber);
        final markTitleOffset = fbb.writeString(object.markTitle);
        final maxMarkOffset = fbb.writeString(object.maxMark);
        final weightageOffset = fbb.writeString(object.weightage);
        final statusOffset = fbb.writeString(object.status);
        final scoredMarkOffset = fbb.writeString(object.scoredMark);
        final weightageMarkOffset = fbb.writeString(object.weightageMark);
        final remarkOffset = fbb.writeString(object.remark);
        fbb.startTable(10);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, serialNumberOffset);
        fbb.addOffset(2, markTitleOffset);
        fbb.addOffset(3, maxMarkOffset);
        fbb.addOffset(4, weightageOffset);
        fbb.addOffset(5, statusOffset);
        fbb.addOffset(6, scoredMarkOffset);
        fbb.addOffset(7, weightageMarkOffset);
        fbb.addOffset(8, remarkOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final serialNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final markTitleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final maxMarkParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final weightageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final scoredMarkParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final weightageMarkParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final remarkParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final object = Detail(
          serialNumber: serialNumberParam,
          markTitle: markTitleParam,
          maxMark: maxMarkParam,
          weightage: weightageParam,
          status: statusParam,
          scoredMark: scoredMarkParam,
          weightageMark: weightageMarkParam,
          remark: remarkParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    ExamSchedule: obx_int.EntityDefinition<ExamSchedule>(
      model: _entities[3],
      toOneRelations: (ExamSchedule object) => [],
      toManyRelations: (ExamSchedule object) => {
        obx_int.RelInfo<ExamSchedule>.toMany(1, object.id!): object.subjects,
      },
      getId: (ExamSchedule object) => object.id,
      setId: (ExamSchedule object, int id) {
        object.id = id;
      },
      objectToFB: (ExamSchedule object, fb.Builder fbb) {
        final examTypeOffset = fbb.writeString(object.examType);
        fbb.startTable(3);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, examTypeOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final subjectsParam = obx.ToMany<Subject>();
        final examTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = ExamSchedule(
          subjectsParam,
          examType: examTypeParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        obx_int.InternalToManyAccess.setRelInfo<ExamSchedule>(
          object.subjects,
          store,
          obx_int.RelInfo<ExamSchedule>.toMany(1, object.id!),
        );
        return object;
      },
    ),
    GradeHistory: obx_int.EntityDefinition<GradeHistory>(
      model: _entities[4],
      toOneRelations: (GradeHistory object) => [],
      toManyRelations: (GradeHistory object) => {
        obx_int.RelInfo<GradeHistory>.toMany(13, object.id!): object.courses,
      },
      getId: (GradeHistory object) => object.id,
      setId: (GradeHistory object, int id) {
        object.id = id;
      },
      objectToFB: (GradeHistory object, fb.Builder fbb) {
        final creditsRegisteredOffset = fbb.writeString(
          object.creditsRegistered,
        );
        final creditsEarnedOffset = fbb.writeString(object.creditsEarned);
        final cgpaOffset = fbb.writeString(object.cgpa);
        fbb.startTable(5);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, creditsRegisteredOffset);
        fbb.addOffset(2, creditsEarnedOffset);
        fbb.addOffset(3, cgpaOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final creditsRegisteredParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final creditsEarnedParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final cgpaParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final coursesParam = obx.ToMany<Course>();
        final object = GradeHistory(
          creditsRegistered: creditsRegisteredParam,
          creditsEarned: creditsEarnedParam,
          cgpa: cgpaParam,
          courses: coursesParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        obx_int.InternalToManyAccess.setRelInfo<GradeHistory>(
          object.courses,
          store,
          obx_int.RelInfo<GradeHistory>.toMany(13, object.id!),
        );
        return object;
      },
    ),
    Mark: obx_int.EntityDefinition<Mark>(
      model: _entities[5],
      toOneRelations: (Mark object) => [],
      toManyRelations: (Mark object) => {
        obx_int.RelInfo<Mark>.toMany(2, object.id!): object.details,
      },
      getId: (Mark object) => object.id,
      setId: (Mark object, int id) {
        object.id = id;
      },
      objectToFB: (Mark object, fb.Builder fbb) {
        final serialNumberOffset = fbb.writeString(object.serialNumber);
        final courseCodeOffset = fbb.writeString(object.courseCode);
        final courseTitleOffset = fbb.writeString(object.courseTitle);
        final courseTypeOffset = fbb.writeString(object.courseType);
        final facultyOffset = fbb.writeString(object.faculty);
        final slotOffset = fbb.writeString(object.slot);
        fbb.startTable(10);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, serialNumberOffset);
        fbb.addOffset(3, courseCodeOffset);
        fbb.addOffset(4, courseTitleOffset);
        fbb.addOffset(5, courseTypeOffset);
        fbb.addOffset(7, facultyOffset);
        fbb.addOffset(8, slotOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final serialNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final courseCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final courseTitleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final courseTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final facultyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final slotParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final detailsParam = obx.ToMany<Detail>();
        final object = Mark(
          serialNumber: serialNumberParam,
          courseCode: courseCodeParam,
          courseTitle: courseTitleParam,
          courseType: courseTypeParam,
          faculty: facultyParam,
          slot: slotParam,
          details: detailsParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        obx_int.InternalToManyAccess.setRelInfo<Mark>(
          object.details,
          store,
          obx_int.RelInfo<Mark>.toMany(2, object.id!),
        );
        return object;
      },
    ),
    MentorDetails: obx_int.EntityDefinition<MentorDetails>(
      model: _entities[6],
      toOneRelations: (MentorDetails object) => [],
      toManyRelations: (MentorDetails object) => {},
      getId: (MentorDetails object) => object.id,
      setId: (MentorDetails object, int id) {
        object.id = id;
      },
      objectToFB: (MentorDetails object, fb.Builder fbb) {
        final facultyIdOffset = fbb.writeString(object.facultyId);
        final facultyNameOffset = fbb.writeString(object.facultyName);
        final facultyDesignationOffset = fbb.writeString(
          object.facultyDesignation,
        );
        final schoolOffset = fbb.writeString(object.school);
        final cabinOffset = fbb.writeString(object.cabin);
        final facultyDepartmentOffset = fbb.writeString(
          object.facultyDepartment,
        );
        final facultyEmailOffset = fbb.writeString(object.facultyEmail);
        final facultyIntercomOffset = fbb.writeString(object.facultyIntercom);
        final facultyMobileNumberOffset = fbb.writeString(
          object.facultyMobileNumber,
        );
        fbb.startTable(11);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, facultyIdOffset);
        fbb.addOffset(2, facultyNameOffset);
        fbb.addOffset(3, facultyDesignationOffset);
        fbb.addOffset(4, schoolOffset);
        fbb.addOffset(5, cabinOffset);
        fbb.addOffset(6, facultyDepartmentOffset);
        fbb.addOffset(7, facultyEmailOffset);
        fbb.addOffset(8, facultyIntercomOffset);
        fbb.addOffset(9, facultyMobileNumberOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final facultyIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final facultyNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final facultyDesignationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final schoolParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final cabinParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final facultyDepartmentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final facultyEmailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final facultyIntercomParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final facultyMobileNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final object = MentorDetails(
          facultyId: facultyIdParam,
          facultyName: facultyNameParam,
          facultyDesignation: facultyDesignationParam,
          school: schoolParam,
          cabin: cabinParam,
          facultyDepartment: facultyDepartmentParam,
          facultyEmail: facultyEmailParam,
          facultyIntercom: facultyIntercomParam,
          facultyMobileNumber: facultyMobileNumberParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    Profile: obx_int.EntityDefinition<Profile>(
      model: _entities[7],
      toOneRelations: (Profile object) => [
        object.gradeHistory,
        object.mentorDetails,
      ],
      toManyRelations: (Profile object) => {},
      getId: (Profile object) => object.id,
      setId: (Profile object, int id) {
        object.id = id;
      },
      objectToFB: (Profile object, fb.Builder fbb) {
        final applicationNumberOffset = fbb.writeString(
          object.applicationNumber,
        );
        final studentNameOffset = fbb.writeString(object.studentName);
        final dobOffset = fbb.writeString(object.dob);
        final genderOffset = fbb.writeString(object.gender);
        final bloodGroupOffset = fbb.writeString(object.bloodGroup);
        final emailOffset = fbb.writeString(object.email);
        final base64PfpOffset = object.base64Pfp == null
            ? null
            : fbb.writeString(object.base64Pfp!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, applicationNumberOffset);
        fbb.addOffset(2, studentNameOffset);
        fbb.addOffset(3, dobOffset);
        fbb.addOffset(4, genderOffset);
        fbb.addOffset(5, bloodGroupOffset);
        fbb.addOffset(6, emailOffset);
        fbb.addOffset(7, base64PfpOffset);
        fbb.addInt64(8, object.gradeHistory.targetId);
        fbb.addInt64(9, object.mentorDetails.targetId);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final applicationNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final studentNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final dobParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final genderParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final bloodGroupParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final base64PfpParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final gradeHistoryParam = obx.ToOne<GradeHistory>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
        );
        final mentorDetailsParam = obx.ToOne<MentorDetails>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
        );
        final object = Profile(
          applicationNumber: applicationNumberParam,
          studentName: studentNameParam,
          dob: dobParam,
          gender: genderParam,
          bloodGroup: bloodGroupParam,
          email: emailParam,
          base64Pfp: base64PfpParam,
          gradeHistory: gradeHistoryParam,
          mentorDetails: mentorDetailsParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        object.gradeHistory.attach(store);
        object.mentorDetails.attach(store);
        return object;
      },
    ),
    Subject: obx_int.EntityDefinition<Subject>(
      model: _entities[8],
      toOneRelations: (Subject object) => [],
      toManyRelations: (Subject object) => {},
      getId: (Subject object) => object.id,
      setId: (Subject object, int id) {
        object.id = id;
      },
      objectToFB: (Subject object, fb.Builder fbb) {
        final serialNumberOffset = fbb.writeString(object.serialNumber);
        final courseCodeOffset = fbb.writeString(object.courseCode);
        final courseTitleOffset = fbb.writeString(object.courseTitle);
        final typeOffset = fbb.writeString(object.type);
        final slotOffset = fbb.writeString(object.slot);
        final dateOffset = fbb.writeString(object.date);
        final sessionOffset = fbb.writeString(object.session);
        final reportingTimeOffset = fbb.writeString(object.reportingTime);
        final examTimeOffset = fbb.writeString(object.examTime);
        final venueOffset = fbb.writeString(object.venue);
        final seatLocationOffset = fbb.writeString(object.seatLocation);
        final seatNumberOffset = fbb.writeString(object.seatNumber);
        final courseIdOffset = fbb.writeString(object.courseId);
        fbb.startTable(16);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, serialNumberOffset);
        fbb.addOffset(2, courseCodeOffset);
        fbb.addOffset(3, courseTitleOffset);
        fbb.addOffset(4, typeOffset);
        fbb.addOffset(6, slotOffset);
        fbb.addOffset(7, dateOffset);
        fbb.addOffset(8, sessionOffset);
        fbb.addOffset(9, reportingTimeOffset);
        fbb.addOffset(10, examTimeOffset);
        fbb.addOffset(11, venueOffset);
        fbb.addOffset(12, seatLocationOffset);
        fbb.addOffset(13, seatNumberOffset);
        fbb.addOffset(14, courseIdOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final serialNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final courseCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final courseTitleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final courseIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 32, '');
        final slotParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final dateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final sessionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final reportingTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final examTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final venueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final seatLocationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final seatNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final object = Subject(
          serialNumber: serialNumberParam,
          courseCode: courseCodeParam,
          courseTitle: courseTitleParam,
          type: typeParam,
          courseId: courseIdParam,
          slot: slotParam,
          date: dateParam,
          session: sessionParam,
          reportingTime: reportingTimeParam,
          examTime: examTimeParam,
          venue: venueParam,
          seatLocation: seatLocationParam,
          seatNumber: seatNumberParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    Timetable: obx_int.EntityDefinition<Timetable>(
      model: _entities[9],
      toOneRelations: (Timetable object) => [],
      toManyRelations: (Timetable object) => {
        obx_int.RelInfo<Timetable>.toMany(3, object.id!): object.monday,
        obx_int.RelInfo<Timetable>.toMany(4, object.id!): object.tuesday,
        obx_int.RelInfo<Timetable>.toMany(5, object.id!): object.wednesday,
        obx_int.RelInfo<Timetable>.toMany(6, object.id!): object.thursday,
        obx_int.RelInfo<Timetable>.toMany(7, object.id!): object.friday,
        obx_int.RelInfo<Timetable>.toMany(8, object.id!): object.saturday,
        obx_int.RelInfo<Timetable>.toMany(9, object.id!): object.sunday,
      },
      getId: (Timetable object) => object.id,
      setId: (Timetable object, int id) {
        object.id = id;
      },
      objectToFB: (Timetable object, fb.Builder fbb) {
        fbb.startTable(2);
        fbb.addInt64(0, object.id ?? 0);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final mondayParam = obx.ToMany<Day>();
        final tuesdayParam = obx.ToMany<Day>();
        final wednesdayParam = obx.ToMany<Day>();
        final thursdayParam = obx.ToMany<Day>();
        final fridayParam = obx.ToMany<Day>();
        final saturdayParam = obx.ToMany<Day>();
        final sundayParam = obx.ToMany<Day>();
        final object = Timetable(
          monday: mondayParam,
          tuesday: tuesdayParam,
          wednesday: wednesdayParam,
          thursday: thursdayParam,
          friday: fridayParam,
          saturday: saturdayParam,
          sunday: sundayParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.monday,
          store,
          obx_int.RelInfo<Timetable>.toMany(3, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.tuesday,
          store,
          obx_int.RelInfo<Timetable>.toMany(4, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.wednesday,
          store,
          obx_int.RelInfo<Timetable>.toMany(5, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.thursday,
          store,
          obx_int.RelInfo<Timetable>.toMany(6, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.friday,
          store,
          obx_int.RelInfo<Timetable>.toMany(7, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.saturday,
          store,
          obx_int.RelInfo<Timetable>.toMany(8, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.sunday,
          store,
          obx_int.RelInfo<Timetable>.toMany(9, object.id!),
        );
        return object;
      },
    ),
    User: obx_int.EntityDefinition<User>(
      model: _entities[10],
      toOneRelations: (User object) => [object.profile, object.timetable],
      toManyRelations: (User object) => {
        obx_int.RelInfo<User>.toMany(10, object.id!): object.attendance,
        obx_int.RelInfo<User>.toMany(11, object.id!): object.examSchedule,
        obx_int.RelInfo<User>.toMany(12, object.id!): object.marks,
      },
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        fbb.startTable(5);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addInt64(1, object.profile.targetId);
        fbb.addInt64(2, object.timetable.targetId);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final profileParam = obx.ToOne<Profile>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final attendanceParam = obx.ToMany<Attendance>();
        final timetableParam = obx.ToOne<Timetable>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final examScheduleParam = obx.ToMany<ExamSchedule>();
        final marksParam = obx.ToMany<Mark>();
        final object = User(
          idParam,
          profile: profileParam,
          attendance: attendanceParam,
          timetable: timetableParam,
          examSchedule: examScheduleParam,
          marks: marksParam,
        );
        object.profile.attach(store);
        object.timetable.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.attendance,
          store,
          obx_int.RelInfo<User>.toMany(10, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.examSchedule,
          store,
          obx_int.RelInfo<User>.toMany(11, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.marks,
          store,
          obx_int.RelInfo<User>.toMany(12, object.id!),
        );
        return object;
      },
    ),
    UserPreferences: obx_int.EntityDefinition<UserPreferences>(
      model: _entities[11],
      toOneRelations: (UserPreferences object) => [],
      toManyRelations: (UserPreferences object) => {},
      getId: (UserPreferences object) => object.id,
      setId: (UserPreferences object, int id) {
        object.id = id;
      },
      objectToFB: (UserPreferences object, fb.Builder fbb) {
        final pfpPathOffset = fbb.writeString(object.pfpPath);
        fbb.startTable(14);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, pfpPathOffset);
        fbb.addBool(2, object.isTimetableNotificationsEnabled);
        fbb.addBool(3, object.isExamScheduleNotificationEnabled);
        fbb.addInt64(4, object.timetableNotificationDelay);
        fbb.addInt64(5, object.examScheduleNotificationDelay);
        fbb.addBool(6, object.isPrivacyEnabled);
        fbb.addBool(7, object.isDarkModeEnabled);
        fbb.addInt64(8, object.lastSync?.millisecondsSinceEpoch);
        fbb.addInt64(9, object.attendanceLastSync?.millisecondsSinceEpoch);
        fbb.addInt64(10, object.marksLastSync?.millisecondsSinceEpoch);
        fbb.addInt64(11, object.examScheduleLastSync?.millisecondsSinceEpoch);
        fbb.addBool(12, object.isFirstLaunch);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final lastSyncValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final attendanceLastSyncValue =
            const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22);
        final marksLastSyncValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          24,
        );
        final examScheduleLastSyncValue =
            const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26);
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final pfpPathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final isTimetableNotificationsEnabledParam =
            const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
        final isExamScheduleNotificationEnabledParam =
            const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
        final timetableNotificationDelayParam =
            const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
        final examScheduleNotificationDelayParam =
            const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
        final isPrivacyEnabledParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final isDarkModeEnabledParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          18,
          false,
        );
        final lastSyncParam = lastSyncValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(lastSyncValue);
        final attendanceLastSyncParam = attendanceLastSyncValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(attendanceLastSyncValue);
        final marksLastSyncParam = marksLastSyncValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(marksLastSyncValue);
        final examScheduleLastSyncParam = examScheduleLastSyncValue == null
            ? null
            : DateTime.fromMillisecondsSinceEpoch(examScheduleLastSyncValue);
        final isFirstLaunchParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          28,
          false,
        );
        final object = UserPreferences(
          id: idParam,
          pfpPath: pfpPathParam,
          isTimetableNotificationsEnabled: isTimetableNotificationsEnabledParam,
          isExamScheduleNotificationEnabled:
              isExamScheduleNotificationEnabledParam,
          timetableNotificationDelay: timetableNotificationDelayParam,
          examScheduleNotificationDelay: examScheduleNotificationDelayParam,
          isPrivacyEnabled: isPrivacyEnabledParam,
          isDarkModeEnabled: isDarkModeEnabledParam,
          lastSync: lastSyncParam,
          attendanceLastSync: attendanceLastSyncParam,
          marksLastSync: marksLastSyncParam,
          examScheduleLastSync: examScheduleLastSyncParam,
          isFirstLaunch: isFirstLaunchParam,
        );

        return object;
      },
    ),
    Course: obx_int.EntityDefinition<Course>(
      model: _entities[12],
      toOneRelations: (Course object) => [],
      toManyRelations: (Course object) => {},
      getId: (Course object) => object.id,
      setId: (Course object, int id) {
        object.id = id;
      },
      objectToFB: (Course object, fb.Builder fbb) {
        final courseCodeOffset = fbb.writeString(object.courseCode);
        final courseTitleOffset = fbb.writeString(object.courseTitle);
        final courseTypeOffset = fbb.writeString(object.courseType);
        final creditsOffset = fbb.writeString(object.credits);
        final gradeOffset = fbb.writeString(object.grade);
        final examMonthOffset = fbb.writeString(object.examMonth);
        final courseDistributionOffset = fbb.writeString(
          object.courseDistribution,
        );
        fbb.startTable(9);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, courseCodeOffset);
        fbb.addOffset(2, courseTitleOffset);
        fbb.addOffset(3, courseTypeOffset);
        fbb.addOffset(4, creditsOffset);
        fbb.addOffset(5, gradeOffset);
        fbb.addOffset(6, examMonthOffset);
        fbb.addOffset(7, courseDistributionOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final courseCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final courseTitleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final courseTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final creditsParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final gradeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final examMonthParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final courseDistributionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final object = Course(
          courseCode: courseCodeParam,
          courseTitle: courseTitleParam,
          courseType: courseTypeParam,
          credits: creditsParam,
          grade: gradeParam,
          examMonth: examMonthParam,
          courseDistribution: courseDistributionParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Attendance] entity fields to define ObjectBox queries.
class Attendance_ {
  /// See [Attendance.id].
  static final id = obx.QueryIntegerProperty<Attendance>(
    _entities[0].properties[0],
  );

  /// See [Attendance.courseId].
  static final courseId = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[1],
  );

  /// See [Attendance.courseCode].
  static final courseCode = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[2],
  );

  /// See [Attendance.courseName].
  static final courseName = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[3],
  );

  /// See [Attendance.courseType].
  static final courseType = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[4],
  );

  /// See [Attendance.courseSlot].
  static final courseSlot = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[5],
  );

  /// See [Attendance.attendedClasses].
  static final attendedClasses = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[6],
  );

  /// See [Attendance.totalClasses].
  static final totalClasses = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[7],
  );

  /// See [Attendance.attendancePercentage].
  static final attendancePercentage = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[8],
  );

  /// See [Attendance.debarStatus].
  static final debarStatus = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[9],
  );

  /// See [Attendance.classNumber].
  static final classNumber = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[10],
  );

  /// See [Attendance.faculty].
  static final faculty = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[11],
  );

  /// See [Attendance.betweenAttendancePercentage].
  static final betweenAttendancePercentage =
      obx.QueryStringProperty<Attendance>(_entities[0].properties[12]);
}

/// [Day] entity fields to define ObjectBox queries.
class Day_ {
  /// See [Day.id].
  static final id = obx.QueryIntegerProperty<Day>(_entities[1].properties[0]);

  /// See [Day.courseName].
  static final courseName = obx.QueryStringProperty<Day>(
    _entities[1].properties[1],
  );

  /// See [Day.slot].
  static final slot = obx.QueryStringProperty<Day>(_entities[1].properties[2]);

  /// See [Day.venue].
  static final venue = obx.QueryStringProperty<Day>(_entities[1].properties[3]);

  /// See [Day.faculty].
  static final faculty = obx.QueryStringProperty<Day>(
    _entities[1].properties[4],
  );

  /// See [Day.courseCode].
  static final courseCode = obx.QueryStringProperty<Day>(
    _entities[1].properties[5],
  );

  /// See [Day.courseType].
  static final courseType = obx.QueryStringProperty<Day>(
    _entities[1].properties[6],
  );

  /// See [Day.startTime].
  static final startTime = obx.QueryStringProperty<Day>(
    _entities[1].properties[7],
  );

  /// See [Day.endTime].
  static final endTime = obx.QueryStringProperty<Day>(
    _entities[1].properties[8],
  );
}

/// [Detail] entity fields to define ObjectBox queries.
class Detail_ {
  /// See [Detail.id].
  static final id = obx.QueryIntegerProperty<Detail>(
    _entities[2].properties[0],
  );

  /// See [Detail.serialNumber].
  static final serialNumber = obx.QueryStringProperty<Detail>(
    _entities[2].properties[1],
  );

  /// See [Detail.markTitle].
  static final markTitle = obx.QueryStringProperty<Detail>(
    _entities[2].properties[2],
  );

  /// See [Detail.maxMark].
  static final maxMark = obx.QueryStringProperty<Detail>(
    _entities[2].properties[3],
  );

  /// See [Detail.weightage].
  static final weightage = obx.QueryStringProperty<Detail>(
    _entities[2].properties[4],
  );

  /// See [Detail.status].
  static final status = obx.QueryStringProperty<Detail>(
    _entities[2].properties[5],
  );

  /// See [Detail.scoredMark].
  static final scoredMark = obx.QueryStringProperty<Detail>(
    _entities[2].properties[6],
  );

  /// See [Detail.weightageMark].
  static final weightageMark = obx.QueryStringProperty<Detail>(
    _entities[2].properties[7],
  );

  /// See [Detail.remark].
  static final remark = obx.QueryStringProperty<Detail>(
    _entities[2].properties[8],
  );
}

/// [ExamSchedule] entity fields to define ObjectBox queries.
class ExamSchedule_ {
  /// See [ExamSchedule.id].
  static final id = obx.QueryIntegerProperty<ExamSchedule>(
    _entities[3].properties[0],
  );

  /// See [ExamSchedule.examType].
  static final examType = obx.QueryStringProperty<ExamSchedule>(
    _entities[3].properties[1],
  );

  /// see [ExamSchedule.subjects]
  static final subjects = obx.QueryRelationToMany<ExamSchedule, Subject>(
    _entities[3].relations[0],
  );
}

/// [GradeHistory] entity fields to define ObjectBox queries.
class GradeHistory_ {
  /// See [GradeHistory.id].
  static final id = obx.QueryIntegerProperty<GradeHistory>(
    _entities[4].properties[0],
  );

  /// See [GradeHistory.creditsRegistered].
  static final creditsRegistered = obx.QueryStringProperty<GradeHistory>(
    _entities[4].properties[1],
  );

  /// See [GradeHistory.creditsEarned].
  static final creditsEarned = obx.QueryStringProperty<GradeHistory>(
    _entities[4].properties[2],
  );

  /// See [GradeHistory.cgpa].
  static final cgpa = obx.QueryStringProperty<GradeHistory>(
    _entities[4].properties[3],
  );

  /// see [GradeHistory.courses]
  static final courses = obx.QueryRelationToMany<GradeHistory, Course>(
    _entities[4].relations[0],
  );
}

/// [Mark] entity fields to define ObjectBox queries.
class Mark_ {
  /// See [Mark.id].
  static final id = obx.QueryIntegerProperty<Mark>(_entities[5].properties[0]);

  /// See [Mark.serialNumber].
  static final serialNumber = obx.QueryStringProperty<Mark>(
    _entities[5].properties[1],
  );

  /// See [Mark.courseCode].
  static final courseCode = obx.QueryStringProperty<Mark>(
    _entities[5].properties[2],
  );

  /// See [Mark.courseTitle].
  static final courseTitle = obx.QueryStringProperty<Mark>(
    _entities[5].properties[3],
  );

  /// See [Mark.courseType].
  static final courseType = obx.QueryStringProperty<Mark>(
    _entities[5].properties[4],
  );

  /// See [Mark.faculty].
  static final faculty = obx.QueryStringProperty<Mark>(
    _entities[5].properties[5],
  );

  /// See [Mark.slot].
  static final slot = obx.QueryStringProperty<Mark>(_entities[5].properties[6]);

  /// see [Mark.details]
  static final details = obx.QueryRelationToMany<Mark, Detail>(
    _entities[5].relations[0],
  );
}

/// [MentorDetails] entity fields to define ObjectBox queries.
class MentorDetails_ {
  /// See [MentorDetails.id].
  static final id = obx.QueryIntegerProperty<MentorDetails>(
    _entities[6].properties[0],
  );

  /// See [MentorDetails.facultyId].
  static final facultyId = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[1],
  );

  /// See [MentorDetails.facultyName].
  static final facultyName = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[2],
  );

  /// See [MentorDetails.facultyDesignation].
  static final facultyDesignation = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[3],
  );

  /// See [MentorDetails.school].
  static final school = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[4],
  );

  /// See [MentorDetails.cabin].
  static final cabin = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[5],
  );

  /// See [MentorDetails.facultyDepartment].
  static final facultyDepartment = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[6],
  );

  /// See [MentorDetails.facultyEmail].
  static final facultyEmail = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[7],
  );

  /// See [MentorDetails.facultyIntercom].
  static final facultyIntercom = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[8],
  );

  /// See [MentorDetails.facultyMobileNumber].
  static final facultyMobileNumber = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[9],
  );
}

/// [Profile] entity fields to define ObjectBox queries.
class Profile_ {
  /// See [Profile.id].
  static final id = obx.QueryIntegerProperty<Profile>(
    _entities[7].properties[0],
  );

  /// See [Profile.applicationNumber].
  static final applicationNumber = obx.QueryStringProperty<Profile>(
    _entities[7].properties[1],
  );

  /// See [Profile.studentName].
  static final studentName = obx.QueryStringProperty<Profile>(
    _entities[7].properties[2],
  );

  /// See [Profile.dob].
  static final dob = obx.QueryStringProperty<Profile>(
    _entities[7].properties[3],
  );

  /// See [Profile.gender].
  static final gender = obx.QueryStringProperty<Profile>(
    _entities[7].properties[4],
  );

  /// See [Profile.bloodGroup].
  static final bloodGroup = obx.QueryStringProperty<Profile>(
    _entities[7].properties[5],
  );

  /// See [Profile.email].
  static final email = obx.QueryStringProperty<Profile>(
    _entities[7].properties[6],
  );

  /// See [Profile.base64Pfp].
  static final base64Pfp = obx.QueryStringProperty<Profile>(
    _entities[7].properties[7],
  );

  /// See [Profile.gradeHistory].
  static final gradeHistory = obx.QueryRelationToOne<Profile, GradeHistory>(
    _entities[7].properties[8],
  );

  /// See [Profile.mentorDetails].
  static final mentorDetails = obx.QueryRelationToOne<Profile, MentorDetails>(
    _entities[7].properties[9],
  );
}

/// [Subject] entity fields to define ObjectBox queries.
class Subject_ {
  /// See [Subject.id].
  static final id = obx.QueryIntegerProperty<Subject>(
    _entities[8].properties[0],
  );

  /// See [Subject.serialNumber].
  static final serialNumber = obx.QueryStringProperty<Subject>(
    _entities[8].properties[1],
  );

  /// See [Subject.courseCode].
  static final courseCode = obx.QueryStringProperty<Subject>(
    _entities[8].properties[2],
  );

  /// See [Subject.courseTitle].
  static final courseTitle = obx.QueryStringProperty<Subject>(
    _entities[8].properties[3],
  );

  /// See [Subject.type].
  static final type = obx.QueryStringProperty<Subject>(
    _entities[8].properties[4],
  );

  /// See [Subject.slot].
  static final slot = obx.QueryStringProperty<Subject>(
    _entities[8].properties[5],
  );

  /// See [Subject.date].
  static final date = obx.QueryStringProperty<Subject>(
    _entities[8].properties[6],
  );

  /// See [Subject.session].
  static final session = obx.QueryStringProperty<Subject>(
    _entities[8].properties[7],
  );

  /// See [Subject.reportingTime].
  static final reportingTime = obx.QueryStringProperty<Subject>(
    _entities[8].properties[8],
  );

  /// See [Subject.examTime].
  static final examTime = obx.QueryStringProperty<Subject>(
    _entities[8].properties[9],
  );

  /// See [Subject.venue].
  static final venue = obx.QueryStringProperty<Subject>(
    _entities[8].properties[10],
  );

  /// See [Subject.seatLocation].
  static final seatLocation = obx.QueryStringProperty<Subject>(
    _entities[8].properties[11],
  );

  /// See [Subject.seatNumber].
  static final seatNumber = obx.QueryStringProperty<Subject>(
    _entities[8].properties[12],
  );

  /// See [Subject.courseId].
  static final courseId = obx.QueryStringProperty<Subject>(
    _entities[8].properties[13],
  );
}

/// [Timetable] entity fields to define ObjectBox queries.
class Timetable_ {
  /// See [Timetable.id].
  static final id = obx.QueryIntegerProperty<Timetable>(
    _entities[9].properties[0],
  );

  /// see [Timetable.monday]
  static final monday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[0],
  );

  /// see [Timetable.tuesday]
  static final tuesday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[1],
  );

  /// see [Timetable.wednesday]
  static final wednesday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[2],
  );

  /// see [Timetable.thursday]
  static final thursday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[3],
  );

  /// see [Timetable.friday]
  static final friday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[4],
  );

  /// see [Timetable.saturday]
  static final saturday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[5],
  );

  /// see [Timetable.sunday]
  static final sunday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[6],
  );
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[10].properties[0]);

  /// See [User.profile].
  static final profile = obx.QueryRelationToOne<User, Profile>(
    _entities[10].properties[1],
  );

  /// See [User.timetable].
  static final timetable = obx.QueryRelationToOne<User, Timetable>(
    _entities[10].properties[2],
  );

  /// see [User.attendance]
  static final attendance = obx.QueryRelationToMany<User, Attendance>(
    _entities[10].relations[0],
  );

  /// see [User.examSchedule]
  static final examSchedule = obx.QueryRelationToMany<User, ExamSchedule>(
    _entities[10].relations[1],
  );

  /// see [User.marks]
  static final marks = obx.QueryRelationToMany<User, Mark>(
    _entities[10].relations[2],
  );
}

/// [UserPreferences] entity fields to define ObjectBox queries.
class UserPreferences_ {
  /// See [UserPreferences.id].
  static final id = obx.QueryIntegerProperty<UserPreferences>(
    _entities[11].properties[0],
  );

  /// See [UserPreferences.pfpPath].
  static final pfpPath = obx.QueryStringProperty<UserPreferences>(
    _entities[11].properties[1],
  );

  /// See [UserPreferences.isTimetableNotificationsEnabled].
  static final isTimetableNotificationsEnabled =
      obx.QueryBooleanProperty<UserPreferences>(_entities[11].properties[2]);

  /// See [UserPreferences.isExamScheduleNotificationEnabled].
  static final isExamScheduleNotificationEnabled =
      obx.QueryBooleanProperty<UserPreferences>(_entities[11].properties[3]);

  /// See [UserPreferences.timetableNotificationDelay].
  static final timetableNotificationDelay =
      obx.QueryIntegerProperty<UserPreferences>(_entities[11].properties[4]);

  /// See [UserPreferences.examScheduleNotificationDelay].
  static final examScheduleNotificationDelay =
      obx.QueryIntegerProperty<UserPreferences>(_entities[11].properties[5]);

  /// See [UserPreferences.isPrivacyEnabled].
  static final isPrivacyEnabled = obx.QueryBooleanProperty<UserPreferences>(
    _entities[11].properties[6],
  );

  /// See [UserPreferences.isDarkModeEnabled].
  static final isDarkModeEnabled = obx.QueryBooleanProperty<UserPreferences>(
    _entities[11].properties[7],
  );

  /// See [UserPreferences.lastSync].
  static final lastSync = obx.QueryDateProperty<UserPreferences>(
    _entities[11].properties[8],
  );

  /// See [UserPreferences.attendanceLastSync].
  static final attendanceLastSync = obx.QueryDateProperty<UserPreferences>(
    _entities[11].properties[9],
  );

  /// See [UserPreferences.marksLastSync].
  static final marksLastSync = obx.QueryDateProperty<UserPreferences>(
    _entities[11].properties[10],
  );

  /// See [UserPreferences.examScheduleLastSync].
  static final examScheduleLastSync = obx.QueryDateProperty<UserPreferences>(
    _entities[11].properties[11],
  );

  /// See [UserPreferences.isFirstLaunch].
  static final isFirstLaunch = obx.QueryBooleanProperty<UserPreferences>(
    _entities[11].properties[12],
  );
}

/// [Course] entity fields to define ObjectBox queries.
class Course_ {
  /// See [Course.id].
  static final id = obx.QueryIntegerProperty<Course>(
    _entities[12].properties[0],
  );

  /// See [Course.courseCode].
  static final courseCode = obx.QueryStringProperty<Course>(
    _entities[12].properties[1],
  );

  /// See [Course.courseTitle].
  static final courseTitle = obx.QueryStringProperty<Course>(
    _entities[12].properties[2],
  );

  /// See [Course.courseType].
  static final courseType = obx.QueryStringProperty<Course>(
    _entities[12].properties[3],
  );

  /// See [Course.credits].
  static final credits = obx.QueryStringProperty<Course>(
    _entities[12].properties[4],
  );

  /// See [Course.grade].
  static final grade = obx.QueryStringProperty<Course>(
    _entities[12].properties[5],
  );

  /// See [Course.examMonth].
  static final examMonth = obx.QueryStringProperty<Course>(
    _entities[12].properties[6],
  );

  /// See [Course.courseDistribution].
  static final courseDistribution = obx.QueryStringProperty<Course>(
    _entities[12].properties[7],
  );
}
